

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Sep 18 10:34:55 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K42
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=4,class=CODE,delta=1
    31                           	psect	text19,global,reloc=4,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=4,class=CODE,delta=1
    34                           	psect	ivt0x8,global,reloc=2,class=CODE,delta=1,noexec,keep,optim=
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F45K42 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	eeprom_data
    74  310000  04 10 0B 00 00 00 00 00 	db	4,16,11,0,0,0,0,0	;# 
    75  0000                     
    76                           	psect	mediumconst
    77  007D5A                     __pmediumconst:
    78                           	opt stack 0
    79  007D5A  00                 	db	0
    80  007D5B                     _dpowers:
    81                           	opt stack 0
    82  007D5B  0001               	dw	1
    83  007D5D  000A               	dw	10
    84  007D5F  0064               	dw	100
    85  007D61  03E8               	dw	1000
    86  007D63  2710               	dw	10000
    87  007D65                     __end_of_dpowers:
    88                           	opt stack 0
    89  007D65                     STR_26:
    90                           
    91                           ; BSR set to: 63
    92  007D65  43                 	db	67	;'C'
    93  007D66  4F                 	db	79	;'O'
    94  007D67  4D                 	db	77	;'M'
    95  007D68  4D                 	db	77	;'M'
    96  007D69  41                 	db	65	;'A'
    97  007D6A  4E                 	db	78	;'N'
    98  007D6B  44                 	db	68	;'D'
    99  007D6C  53                 	db	83	;'S'
   100  007D6D  3A                 	db	58	;':'
   101  007D6E  0D                 	db	13
   102  007D6F  0A                 	db	10
   103  007D70  4C                 	db	76	;'L'
   104  007D71  45                 	db	69	;'E'
   105  007D72  44                 	db	68	;'D'
   106  007D73  32                 	db	50	;'2'
   107  007D74  20                 	db	32
   108  007D75  20                 	db	32
   109  007D76  20                 	db	32
   110  007D77  20                 	db	32
   111  007D78  2D                 	db	45
   112  007D79  20                 	db	32
   113  007D7A  54                 	db	84	;'T'
   114  007D7B  6F                 	db	111	;'o'
   115  007D7C  67                 	db	103	;'g'
   116  007D7D  67                 	db	103	;'g'
   117  007D7E  6C                 	db	108	;'l'
   118  007D7F  65                 	db	101	;'e'
   119  007D80  20                 	db	32
   120  007D81  4C                 	db	76	;'L'
   121  007D82  45                 	db	69	;'E'
   122  007D83  44                 	db	68	;'D'
   123  007D84  32                 	db	50	;'2'
   124  007D85  0D                 	db	13
   125  007D86  0A                 	db	10
   126  007D87  54                 	db	84	;'T'
   127  007D88  54                 	db	84	;'T'
   128  007D89  78                 	db	120	;'x'
   129  007D8A  78                 	db	120	;'x'
   130  007D8B  20                 	db	32
   131  007D8C  20                 	db	32
   132  007D8D  20                 	db	32
   133  007D8E  20                 	db	32
   134  007D8F  2D                 	db	45
   135  007D90  20                 	db	32
   136  007D91  54                 	db	84	;'T'
   137  007D92  72                 	db	114	;'r'
   138  007D93  61                 	db	97	;'a'
   139  007D94  6E                 	db	110	;'n'
   140  007D95  73                 	db	115	;'s'
   141  007D96  69                 	db	105	;'i'
   142  007D97  74                 	db	116	;'t'
   143  007D98  69                 	db	105	;'i'
   144  007D99  6F                 	db	111	;'o'
   145  007D9A  6E                 	db	110	;'n'
   146  007D9B  20                 	db	32
   147  007D9C  74                 	db	116	;'t'
   148  007D9D  69                 	db	105	;'i'
   149  007D9E  6D                 	db	109	;'m'
   150  007D9F  65                 	db	101	;'e'
   151  007DA0  2C                 	db	44
   152  007DA1  20                 	db	32
   153  007DA2  78                 	db	120	;'x'
   154  007DA3  78                 	db	120	;'x'
   155  007DA4  20                 	db	32
   156  007DA5  3D                 	db	61	;'='
   157  007DA6  20                 	db	32
   158  007DA7  61                 	db	97	;'a'
   159  007DA8  20                 	db	32
   160  007DA9  76                 	db	118	;'v'
   161  007DAA  61                 	db	97	;'a'
   162  007DAB  6C                 	db	108	;'l'
   163  007DAC  75                 	db	117	;'u'
   164  007DAD  65                 	db	101	;'e'
   165  007DAE  20                 	db	32
   166  007DAF  30                 	db	48	;'0'
   167  007DB0  31                 	db	49	;'1'
   168  007DB1  20                 	db	32
   169  007DB2  74                 	db	116	;'t'
   170  007DB3  6F                 	db	111	;'o'
   171  007DB4  20                 	db	32
   172  007DB5  39                 	db	57	;'9'
   173  007DB6  39                 	db	57	;'9'
   174  007DB7  20                 	db	32
   175  007DB8  73                 	db	115	;'s'
   176  007DB9  65                 	db	101	;'e'
   177  007DBA  63                 	db	99	;'c'
   178  007DBB  6F                 	db	111	;'o'
   179  007DBC  6E                 	db	110	;'n'
   180  007DBD  64                 	db	100	;'d'
   181  007DBE  73                 	db	115	;'s'
   182  007DBF  2E                 	db	46
   183  007DC0  0D                 	db	13
   184  007DC1  0A                 	db	10
   185  007DC2  52                 	db	82	;'R'
   186  007DC3  54                 	db	84	;'T'
   187  007DC4  78                 	db	120	;'x'
   188  007DC5  78                 	db	120	;'x'
   189  007DC6  20                 	db	32
   190  007DC7  20                 	db	32
   191  007DC8  20                 	db	32
   192  007DC9  20                 	db	32
   193  007DCA  2D                 	db	45
   194  007DCB  20                 	db	32
   195  007DCC  52                 	db	82	;'R'
   196  007DCD  65                 	db	101	;'e'
   197  007DCE  64                 	db	100	;'d'
   198  007DCF  20                 	db	32
   199  007DD0  6C                 	db	108	;'l'
   200  007DD1  69                 	db	105	;'i'
   201  007DD2  67                 	db	103	;'g'
   202  007DD3  68                 	db	104	;'h'
   203  007DD4  74                 	db	116	;'t'
   204  007DD5  20                 	db	32
   205  007DD6  74                 	db	116	;'t'
   206  007DD7  69                 	db	105	;'i'
   207  007DD8  6D                 	db	109	;'m'
   208  007DD9  65                 	db	101	;'e'
   209  007DDA  2C                 	db	44
   210  007DDB  20                 	db	32
   211  007DDC  78                 	db	120	;'x'
   212  007DDD  78                 	db	120	;'x'
   213  007DDE  20                 	db	32
   214  007DDF  3D                 	db	61	;'='
   215  007DE0  20                 	db	32
   216  007DE1  61                 	db	97	;'a'
   217  007DE2  20                 	db	32
   218  007DE3  76                 	db	118	;'v'
   219  007DE4  61                 	db	97	;'a'
   220  007DE5  6C                 	db	108	;'l'
   221  007DE6  75                 	db	117	;'u'
   222  007DE7  65                 	db	101	;'e'
   223  007DE8  20                 	db	32
   224  007DE9  30                 	db	48	;'0'
   225  007DEA  31                 	db	49	;'1'
   226  007DEB  20                 	db	32
   227  007DEC  74                 	db	116	;'t'
   228  007DED  6F                 	db	111	;'o'
   229  007DEE  20                 	db	32
   230  007DEF  39                 	db	57	;'9'
   231  007DF0  39                 	db	57	;'9'
   232  007DF1  20                 	db	32
   233  007DF2  73                 	db	115	;'s'
   234  007DF3  65                 	db	101	;'e'
   235  007DF4  63                 	db	99	;'c'
   236  007DF5  6F                 	db	111	;'o'
   237  007DF6  6E                 	db	110	;'n'
   238  007DF7  64                 	db	100	;'d'
   239  007DF8  73                 	db	115	;'s'
   240  007DF9  2E                 	db	46
   241  007DFA  0D                 	db	13
   242  007DFB  0A                 	db	10
   243  007DFC  42                 	db	66	;'B'
   244  007DFD  50                 	db	80	;'P'
   245  007DFE  78                 	db	120	;'x'
   246  007DFF  78                 	db	120	;'x'
   247  007E00  20                 	db	32
   248  007E01  20                 	db	32
   249  007E02  20                 	db	32
   250  007E03  20                 	db	32
   251  007E04  2D                 	db	45
   252  007E05  20                 	db	32
   253  007E06  42                 	db	66	;'B'
   254  007E07  75                 	db	117	;'u'
   255  007E08  74                 	db	116	;'t'
   256  007E09  74                 	db	116	;'t'
   257  007E0A  6F                 	db	111	;'o'
   258  007E0B  6E                 	db	110	;'n'
   259  007E0C  20                 	db	32
   260  007E0D  70                 	db	112	;'p'
   261  007E0E  72                 	db	114	;'r'
   262  007E0F  65                 	db	101	;'e'
   263  007E10  73                 	db	115	;'s'
   264  007E11  73                 	db	115	;'s'
   265  007E12  20                 	db	32
   266  007E13  74                 	db	116	;'t'
   267  007E14  6F                 	db	111	;'o'
   268  007E15  20                 	db	32
   269  007E16  79                 	db	121	;'y'
   270  007E17  65                 	db	101	;'e'
   271  007E18  6C                 	db	108	;'l'
   272  007E19  6C                 	db	108	;'l'
   273  007E1A  6F                 	db	111	;'o'
   274  007E1B  77                 	db	119	;'w'
   275  007E1C  20                 	db	32
   276  007E1D  74                 	db	116	;'t'
   277  007E1E  69                 	db	105	;'i'
   278  007E1F  6D                 	db	109	;'m'
   279  007E20  65                 	db	101	;'e'
   280  007E21  2C                 	db	44
   281  007E22  20                 	db	32
   282  007E23  78                 	db	120	;'x'
   283  007E24  78                 	db	120	;'x'
   284  007E25  20                 	db	32
   285  007E26  3D                 	db	61	;'='
   286  007E27  20                 	db	32
   287  007E28  61                 	db	97	;'a'
   288  007E29  20                 	db	32
   289  007E2A  76                 	db	118	;'v'
   290  007E2B  61                 	db	97	;'a'
   291  007E2C  6C                 	db	108	;'l'
   292  007E2D  75                 	db	117	;'u'
   293  007E2E  65                 	db	101	;'e'
   294  007E2F  20                 	db	32
   295  007E30  30                 	db	48	;'0'
   296  007E31  31                 	db	49	;'1'
   297  007E32  20                 	db	32
   298  007E33  74                 	db	116	;'t'
   299  007E34  6F                 	db	111	;'o'
   300  007E35  20                 	db	32
   301  007E36  39                 	db	57	;'9'
   302  007E37  39                 	db	57	;'9'
   303  007E38  20                 	db	32
   304  007E39  73                 	db	115	;'s'
   305  007E3A  65                 	db	101	;'e'
   306  007E3B  63                 	db	99	;'c'
   307  007E3C  6F                 	db	111	;'o'
   308  007E3D  6E                 	db	110	;'n'
   309  007E3E  64                 	db	100	;'d'
   310  007E3F  73                 	db	115	;'s'
   311  007E40  2E                 	db	46
   312  007E41  0D                 	db	13
   313  007E42  0A                 	db	10
   314  007E43  52                 	db	82	;'R'
   315  007E44  45                 	db	69	;'E'
   316  007E45  52                 	db	82	;'R'
   317  007E46  54                 	db	84	;'T'
   318  007E47  20                 	db	32
   319  007E48  20                 	db	32
   320  007E49  20                 	db	32
   321  007E4A  20                 	db	32
   322  007E4B  2D                 	db	45
   323  007E4C  20                 	db	32
   324  007E4D  52                 	db	82	;'R'
   325  007E4E  65                 	db	101	;'e'
   326  007E4F  61                 	db	97	;'a'
   327  007E50  64                 	db	100	;'d'
   328  007E51  20                 	db	32
   329  007E52  63                 	db	99	;'c'
   330  007E53  75                 	db	117	;'u'
   331  007E54  72                 	db	114	;'r'
   332  007E55  72                 	db	114	;'r'
   333  007E56  65                 	db	101	;'e'
   334  007E57  6E                 	db	110	;'n'
   335  007E58  74                 	db	116	;'t'
   336  007E59  20                 	db	32
   337  007E5A  72                 	db	114	;'r'
   338  007E5B  65                 	db	101	;'e'
   339  007E5C  64                 	db	100	;'d'
   340  007E5D  20                 	db	32
   341  007E5E  6C                 	db	108	;'l'
   342  007E5F  69                 	db	105	;'i'
   343  007E60  67                 	db	103	;'g'
   344  007E61  68                 	db	104	;'h'
   345  007E62  74                 	db	116	;'t'
   346  007E63  20                 	db	32
   347  007E64  74                 	db	116	;'t'
   348  007E65  69                 	db	105	;'i'
   349  007E66  6D                 	db	109	;'m'
   350  007E67  65                 	db	101	;'e'
   351  007E68  20                 	db	32
   352  007E69  66                 	db	102	;'f'
   353  007E6A  72                 	db	114	;'r'
   354  007E6B  6F                 	db	111	;'o'
   355  007E6C  6D                 	db	109	;'m'
   356  007E6D  20                 	db	32
   357  007E6E  45                 	db	69	;'E'
   358  007E6F  45                 	db	69	;'E'
   359  007E70  50                 	db	80	;'P'
   360  007E71  52                 	db	82	;'R'
   361  007E72  4F                 	db	79	;'O'
   362  007E73  4D                 	db	77	;'M'
   363  007E74  2E                 	db	46
   364  007E75  0D                 	db	13
   365  007E76  0A                 	db	10
   366  007E77  52                 	db	82	;'R'
   367  007E78  45                 	db	69	;'E'
   368  007E79  54                 	db	84	;'T'
   369  007E7A  54                 	db	84	;'T'
   370  007E7B  20                 	db	32
   371  007E7C  20                 	db	32
   372  007E7D  20                 	db	32
   373  007E7E  20                 	db	32
   374  007E7F  2D                 	db	45
   375  007E80  20                 	db	32
   376  007E81  52                 	db	82	;'R'
   377  007E82  65                 	db	101	;'e'
   378  007E83  61                 	db	97	;'a'
   379  007E84  64                 	db	100	;'d'
   380  007E85  20                 	db	32
   381  007E86  63                 	db	99	;'c'
   382  007E87  75                 	db	117	;'u'
   383  007E88  72                 	db	114	;'r'
   384  007E89  72                 	db	114	;'r'
   385  007E8A  65                 	db	101	;'e'
   386  007E8B  6E                 	db	110	;'n'
   387  007E8C  74                 	db	116	;'t'
   388  007E8D  20                 	db	32
   389  007E8E  74                 	db	116	;'t'
   390  007E8F  72                 	db	114	;'r'
   391  007E90  61                 	db	97	;'a'
   392  007E91  6E                 	db	110	;'n'
   393  007E92  73                 	db	115	;'s'
   394  007E93  69                 	db	105	;'i'
   395  007E94  74                 	db	116	;'t'
   396  007E95  69                 	db	105	;'i'
   397  007E96  6F                 	db	111	;'o'
   398  007E97  6E                 	db	110	;'n'
   399  007E98  20                 	db	32
   400  007E99  74                 	db	116	;'t'
   401  007E9A  69                 	db	105	;'i'
   402  007E9B  6D                 	db	109	;'m'
   403  007E9C  65                 	db	101	;'e'
   404  007E9D  20                 	db	32
   405  007E9E  66                 	db	102	;'f'
   406  007E9F  72                 	db	114	;'r'
   407  007EA0  6F                 	db	111	;'o'
   408  007EA1  6D                 	db	109	;'m'
   409  007EA2  20                 	db	32
   410  007EA3  45                 	db	69	;'E'
   411  007EA4  45                 	db	69	;'E'
   412  007EA5  50                 	db	80	;'P'
   413  007EA6  52                 	db	82	;'R'
   414  007EA7  4F                 	db	79	;'O'
   415  007EA8  4D                 	db	77	;'M'
   416  007EA9  2E                 	db	46
   417  007EAA  0D                 	db	13
   418  007EAB  0A                 	db	10
   419  007EAC  52                 	db	82	;'R'
   420  007EAD  45                 	db	69	;'E'
   421  007EAE  42                 	db	66	;'B'
   422  007EAF  50                 	db	80	;'P'
   423  007EB0  20                 	db	32
   424  007EB1  20                 	db	32
   425  007EB2  20                 	db	32
   426  007EB3  20                 	db	32
   427  007EB4  2D                 	db	45
   428  007EB5  20                 	db	32
   429  007EB6  52                 	db	82	;'R'
   430  007EB7  65                 	db	101	;'e'
   431  007EB8  61                 	db	97	;'a'
   432  007EB9  64                 	db	100	;'d'
   433  007EBA  20                 	db	32
   434  007EBB  63                 	db	99	;'c'
   435  007EBC  75                 	db	117	;'u'
   436  007EBD  72                 	db	114	;'r'
   437  007EBE  72                 	db	114	;'r'
   438  007EBF  65                 	db	101	;'e'
   439  007EC0  6E                 	db	110	;'n'
   440  007EC1  74                 	db	116	;'t'
   441  007EC2  20                 	db	32
   442  007EC3  62                 	db	98	;'b'
   443  007EC4  75                 	db	117	;'u'
   444  007EC5  74                 	db	116	;'t'
   445  007EC6  74                 	db	116	;'t'
   446  007EC7  6F                 	db	111	;'o'
   447  007EC8  6E                 	db	110	;'n'
   448  007EC9  20                 	db	32
   449  007ECA  74                 	db	116	;'t'
   450  007ECB  6F                 	db	111	;'o'
   451  007ECC  20                 	db	32
   452  007ECD  79                 	db	121	;'y'
   453  007ECE  65                 	db	101	;'e'
   454  007ECF  6C                 	db	108	;'l'
   455  007ED0  6C                 	db	108	;'l'
   456  007ED1  6F                 	db	111	;'o'
   457  007ED2  77                 	db	119	;'w'
   458  007ED3  20                 	db	32
   459  007ED4  74                 	db	116	;'t'
   460  007ED5  72                 	db	114	;'r'
   461  007ED6  61                 	db	97	;'a'
   462  007ED7  6E                 	db	110	;'n'
   463  007ED8  73                 	db	115	;'s'
   464  007ED9  69                 	db	105	;'i'
   465  007EDA  74                 	db	116	;'t'
   466  007EDB  69                 	db	105	;'i'
   467  007EDC  6F                 	db	111	;'o'
   468  007EDD  6E                 	db	110	;'n'
   469  007EDE  20                 	db	32
   470  007EDF  74                 	db	116	;'t'
   471  007EE0  69                 	db	105	;'i'
   472  007EE1  6D                 	db	109	;'m'
   473  007EE2  65                 	db	101	;'e'
   474  007EE3  20                 	db	32
   475  007EE4  66                 	db	102	;'f'
   476  007EE5  72                 	db	114	;'r'
   477  007EE6  6F                 	db	111	;'o'
   478  007EE7  6D                 	db	109	;'m'
   479  007EE8  20                 	db	32
   480  007EE9  45                 	db	69	;'E'
   481  007EEA  45                 	db	69	;'E'
   482  007EEB  50                 	db	80	;'P'
   483  007EEC  52                 	db	82	;'R'
   484  007EED  4F                 	db	79	;'O'
   485  007EEE  4D                 	db	77	;'M'
   486  007EEF  2E                 	db	46
   487  007EF0  0D                 	db	13
   488  007EF1  0A                 	db	10
   489  007EF2  00                 	db	0
   490  007EF3                     STR_3:
   491                           
   492                           ; BSR set to: 63
   493  007EF3  49                 	db	73	;'I'
   494  007EF4  6E                 	db	110	;'n'
   495  007EF5  6C                 	db	108	;'l'
   496  007EF6  E4                 	db	-28
   497  007EF7  6D                 	db	109	;'m'
   498  007EF8  6E                 	db	110	;'n'
   499  007EF9  69                 	db	105	;'i'
   500  007EFA  6E                 	db	110	;'n'
   501  007EFB  67                 	db	103	;'g'
   502  007EFC  73                 	db	115	;'s'
   503  007EFD  75                 	db	117	;'u'
   504  007EFE  70                 	db	112	;'p'
   505  007EFF  70                 	db	112	;'p'
   506  007F00  67                 	db	103	;'g'
   507  007F01  69                 	db	105	;'i'
   508  007F02  66                 	db	102	;'f'
   509  007F03  74                 	db	116	;'t'
   510  007F04  20                 	db	32
   511  007F05  69                 	db	105	;'i'
   512  007F06  20                 	db	32
   513  007F07  6B                 	db	107	;'k'
   514  007F08  75                 	db	117	;'u'
   515  007F09  72                 	db	114	;'r'
   516  007F0A  73                 	db	115	;'s'
   517  007F0B  65                 	db	101	;'e'
   518  007F0C  6E                 	db	110	;'n'
   519  007F0D  20                 	db	32
   520  007F0E  70                 	db	112	;'p'
   521  007F0F  72                 	db	114	;'r'
   522  007F10  6F                 	db	111	;'o'
   523  007F11  63                 	db	99	;'c'
   524  007F12  65                 	db	101	;'e'
   525  007F13  73                 	db	115	;'s'
   526  007F14  73                 	db	115	;'s'
   527  007F15  6F                 	db	111	;'o'
   528  007F16  72                 	db	114	;'r'
   529  007F17  6B                 	db	107	;'k'
   530  007F18  75                 	db	117	;'u'
   531  007F19  6E                 	db	110	;'n'
   532  007F1A  73                 	db	115	;'s'
   533  007F1B  6B                 	db	107	;'k'
   534  007F1C  61                 	db	97	;'a'
   535  007F1D  70                 	db	112	;'p'
   536  007F1E  2E                 	db	46
   537  007F1F  0D                 	db	13
   538  007F20  0A                 	db	10
   539  007F21  00                 	db	0
   540  007F22                     STR_8:
   541                           
   542                           ; BSR set to: 63
   543  007F22  41                 	db	65	;'A'
   544  007F23  20                 	db	32
   545  007F24  63                 	db	99	;'c'
   546  007F25  6F                 	db	111	;'o'
   547  007F26  6D                 	db	109	;'m'
   548  007F27  6D                 	db	109	;'m'
   549  007F28  61                 	db	97	;'a'
   550  007F29  6E                 	db	110	;'n'
   551  007F2A  64                 	db	100	;'d'
   552  007F2B  20                 	db	32
   553  007F2C  68                 	db	104	;'h'
   554  007F2D  61                 	db	97	;'a'
   555  007F2E  73                 	db	115	;'s'
   556  007F2F  20                 	db	32
   557  007F30  74                 	db	116	;'t'
   558  007F31  6F                 	db	111	;'o'
   559  007F32  20                 	db	32
   560  007F33  62                 	db	98	;'b'
   561  007F34  65                 	db	101	;'e'
   562  007F35  20                 	db	32
   563  007F36  34                 	db	52	;'4'
   564  007F37  20                 	db	32
   565  007F38  63                 	db	99	;'c'
   566  007F39  68                 	db	104	;'h'
   567  007F3A  61                 	db	97	;'a'
   568  007F3B  72                 	db	114	;'r'
   569  007F3C  61                 	db	97	;'a'
   570  007F3D  63                 	db	99	;'c'
   571  007F3E  74                 	db	116	;'t'
   572  007F3F  65                 	db	101	;'e'
   573  007F40  72                 	db	114	;'r'
   574  007F41  73                 	db	115	;'s'
   575  007F42  20                 	db	32
   576  007F43  6C                 	db	108	;'l'
   577  007F44  6F                 	db	111	;'o'
   578  007F45  6E                 	db	110	;'n'
   579  007F46  67                 	db	103	;'g'
   580  007F47  2E                 	db	46
   581  007F48  0D                 	db	13
   582  007F49  0A                 	db	10
   583  007F4A  00                 	db	0
   584  007F4B                     STR_6:
   585                           
   586                           ; BSR set to: 63
   587  007F4B  54                 	db	84	;'T'
   588  007F4C  72                 	db	114	;'r'
   589  007F4D  61                 	db	97	;'a'
   590  007F4E  66                 	db	102	;'f'
   591  007F4F  66                 	db	102	;'f'
   592  007F50  69                 	db	105	;'i'
   593  007F51  63                 	db	99	;'c'
   594  007F52  20                 	db	32
   595  007F53  6C                 	db	108	;'l'
   596  007F54  69                 	db	105	;'i'
   597  007F55  67                 	db	103	;'g'
   598  007F56  68                 	db	104	;'h'
   599  007F57  74                 	db	116	;'t'
   600  007F58  73                 	db	115	;'s'
   601  007F59  20                 	db	32
   602  007F5A  69                 	db	105	;'i'
   603  007F5B  6E                 	db	110	;'n'
   604  007F5C  69                 	db	105	;'i'
   605  007F5D  74                 	db	116	;'t'
   606  007F5E  69                 	db	105	;'i'
   607  007F5F  61                 	db	97	;'a'
   608  007F60  6C                 	db	108	;'l'
   609  007F61  69                 	db	105	;'i'
   610  007F62  7A                 	db	122	;'z'
   611  007F63  65                 	db	101	;'e'
   612  007F64  64                 	db	100	;'d'
   613  007F65  2E                 	db	46
   614  007F66  0D                 	db	13
   615  007F67  0A                 	db	10
   616  007F68  0D                 	db	13
   617  007F69  0A                 	db	10
   618  007F6A  00                 	db	0
   619  007F6B                     STR_7:
   620                           
   621                           ; BSR set to: 63
   622  007F6B  54                 	db	84	;'T'
   623  007F6C  79                 	db	121	;'y'
   624  007F6D  70                 	db	112	;'p'
   625  007F6E  65                 	db	101	;'e'
   626  007F6F  20                 	db	32
   627  007F70  22                 	db	34
   628  007F71  68                 	db	104	;'h'
   629  007F72  65                 	db	101	;'e'
   630  007F73  6C                 	db	108	;'l'
   631  007F74  70                 	db	112	;'p'
   632  007F75  22                 	db	34
   633  007F76  20                 	db	32
   634  007F77  66                 	db	102	;'f'
   635  007F78  6F                 	db	111	;'o'
   636  007F79  72                 	db	114	;'r'
   637  007F7A  20                 	db	32
   638  007F7B  63                 	db	99	;'c'
   639  007F7C  6F                 	db	111	;'o'
   640  007F7D  6D                 	db	109	;'m'
   641  007F7E  6D                 	db	109	;'m'
   642  007F7F  61                 	db	97	;'a'
   643  007F80  6E                 	db	110	;'n'
   644  007F81  64                 	db	100	;'d'
   645  007F82  73                 	db	115	;'s'
   646  007F83  2E                 	db	46
   647  007F84  0D                 	db	13
   648  007F85  0A                 	db	10
   649  007F86  0D                 	db	13
   650  007F87  0A                 	db	10
   651  007F88  00                 	db	0
   652  007F89                     STR_4:
   653                           
   654                           ; BSR set to: 63
   655  007F89  41                 	db	65	;'A'
   656  007F8A  76                 	db	118	;'v'
   657  007F8B  20                 	db	32
   658  007F8C  4A                 	db	74	;'J'
   659  007F8D  6F                 	db	111	;'o'
   660  007F8E  61                 	db	97	;'a'
   661  007F8F  63                 	db	99	;'c'
   662  007F90  68                 	db	104	;'h'
   663  007F91  69                 	db	105	;'i'
   664  007F92  6D                 	db	109	;'m'
   665  007F93  20                 	db	32
   666  007F94  57                 	db	87	;'W'
   667  007F95  65                 	db	101	;'e'
   668  007F96  73                 	db	115	;'s'
   669  007F97  74                 	db	116	;'t'
   670  007F98  6C                 	db	108	;'l'
   671  007F99  75                 	db	117	;'u'
   672  007F9A  6E                 	db	110	;'n'
   673  007F9B  64                 	db	100	;'d'
   674  007F9C  2E                 	db	46
   675  007F9D  0D                 	db	13
   676  007F9E  0A                 	db	10
   677  007F9F  0D                 	db	13
   678  007FA0  0A                 	db	10
   679  007FA1  00                 	db	0
   680  007FA2                     STR_12:
   681                           
   682                           ; BSR set to: 63
   683  007FA2  4E                 	db	78	;'N'
   684  007FA3  6F                 	db	111	;'o'
   685  007FA4  74                 	db	116	;'t'
   686  007FA5  20                 	db	32
   687  007FA6  61                 	db	97	;'a'
   688  007FA7  20                 	db	32
   689  007FA8  76                 	db	118	;'v'
   690  007FA9  61                 	db	97	;'a'
   691  007FAA  6C                 	db	108	;'l'
   692  007FAB  69                 	db	105	;'i'
   693  007FAC  64                 	db	100	;'d'
   694  007FAD  20                 	db	32
   695  007FAE  6E                 	db	110	;'n'
   696  007FAF  75                 	db	117	;'u'
   697  007FB0  6D                 	db	109	;'m'
   698  007FB1  62                 	db	98	;'b'
   699  007FB2  65                 	db	101	;'e'
   700  007FB3  72                 	db	114	;'r'
   701  007FB4  0D                 	db	13
   702  007FB5  0A                 	db	10
   703  007FB6  00                 	db	0
   704  007FB7                     STR_5:
   705                           
   706                           ; BSR set to: 63
   707  007FB7  55                 	db	85	;'U'
   708  007FB8  41                 	db	65	;'A'
   709  007FB9  52                 	db	82	;'R'
   710  007FBA  54                 	db	84	;'T'
   711  007FBB  31                 	db	49	;'1'
   712  007FBC  20                 	db	32
   713  007FBD  69                 	db	105	;'i'
   714  007FBE  6E                 	db	110	;'n'
   715  007FBF  69                 	db	105	;'i'
   716  007FC0  74                 	db	116	;'t'
   717  007FC1  69                 	db	105	;'i'
   718  007FC2  61                 	db	97	;'a'
   719  007FC3  6C                 	db	108	;'l'
   720  007FC4  69                 	db	105	;'i'
   721  007FC5  7A                 	db	122	;'z'
   722  007FC6  65                 	db	101	;'e'
   723  007FC7  64                 	db	100	;'d'
   724  007FC8  2E                 	db	46
   725  007FC9  0D                 	db	13
   726  007FCA  0A                 	db	10
   727  007FCB  00                 	db	0
   728  007FCC                     STR_2:
   729                           
   730                           ; BSR set to: 63
   731  007FCC  54                 	db	84	;'T'
   732  007FCD  72                 	db	114	;'r'
   733  007FCE  61                 	db	97	;'a'
   734  007FCF  66                 	db	102	;'f'
   735  007FD0  69                 	db	105	;'i'
   736  007FD1  6B                 	db	107	;'k'
   737  007FD2  6B                 	db	107	;'k'
   738  007FD3  6F                 	db	111	;'o'
   739  007FD4  72                 	db	114	;'r'
   740  007FD5  73                 	db	115	;'s'
   741  007FD6  6E                 	db	110	;'n'
   742  007FD7  69                 	db	105	;'i'
   743  007FD8  6E                 	db	110	;'n'
   744  007FD9  67                 	db	103	;'g'
   745  007FDA  2E                 	db	46
   746  007FDB  0D                 	db	13
   747  007FDC  0A                 	db	10
   748  007FDD  0D                 	db	13
   749  007FDE  0A                 	db	10
   750  007FDF  00                 	db	0
   751  007FE0                     STR_10:
   752                           
   753                           ; BSR set to: 63
   754  007FE0  4F                 	db	79	;'O'
   755  007FE1  4B                 	db	75	;'K'
   756  007FE2  2E                 	db	46
   757  007FE3  0D                 	db	13
   758  007FE4  0A                 	db	10
   759  007FE5  00                 	db	0
   760  007FE6                     STR_21:
   761                           
   762                           ; BSR set to: 63
   763  007FE6  25                 	db	37
   764  007FE7  64                 	db	100	;'d'
   765  007FE8  0D                 	db	13
   766  007FE9  0A                 	db	10
   767  007FEA  00                 	db	0
   768  007FEB                     STR_9:
   769                           
   770                           ; BSR set to: 63
   771  007FEB  4C                 	db	76	;'L'
   772  007FEC  45                 	db	69	;'E'
   773  007FED  44                 	db	68	;'D'
   774  007FEE  32                 	db	50	;'2'
   775  007FEF  00                 	db	0
   776  007FF0                     STR_24:
   777                           
   778                           ; BSR set to: 63
   779  007FF0  52                 	db	82	;'R'
   780  007FF1  45                 	db	69	;'E'
   781  007FF2  42                 	db	66	;'B'
   782  007FF3  50                 	db	80	;'P'
   783  007FF4  00                 	db	0
   784  007FF5                     STR_20:
   785                           
   786                           ; BSR set to: 63
   787  007FF5  52                 	db	82	;'R'
   788  007FF6  45                 	db	69	;'E'
   789  007FF7  52                 	db	82	;'R'
   790  007FF8  54                 	db	84	;'T'
   791  007FF9  00                 	db	0
   792  007FFA                     STR_22:
   793                           
   794                           ; BSR set to: 63
   795  007FFA  52                 	db	82	;'R'
   796  007FFB  45                 	db	69	;'E'
   797  007FFC  54                 	db	84	;'T'
   798  007FFD  54                 	db	84	;'T'
   799  007FFE  00                 	db	0
   800  0000                     
   801                           ; #config settings
   802  007FFF  00                 	db	0	; dummy byte at the end
   803  0000                     
   804                           	psect	nvCOMRAM
   805  000041                     __pnvCOMRAM:
   806                           	opt stack 0
   807  000041                     _s_transition_counter:
   808                           	opt stack 0
   809  000041                     	ds	1
   810  0000                     _NVMCON2	set	14822
   811  0000                     _NVMCON1bits	set	14821
   812  0000                     _NVMDAT	set	14819
   813  0000                     _NVMADRL	set	14816
   814  0000                     _PIE4bits	set	14740
   815  0000                     _PIR4bits	set	14756
   816  0000                     _PIR3bits	set	14755
   817  0000                     _PIE3bits	set	14739
   818  0000                     _IPR3bits	set	14723
   819  0000                     _IPR4bits	set	14724
   820  0000                     _ANSELD	set	14960
   821  0000                     _U1RXPPSbits	set	15077
   822  0000                     _RB4PPS	set	14860
   823  0000                     _ANSELBbits	set	14928
   824  0000                     _U1TXB	set	15850
   825  0000                     _U1RXB	set	15848
   826  0000                     _U1ERRIRbits	set	15865
   827  0000                     _U1BRGH	set	15862
   828  0000                     _U1BRGL	set	15861
   829  0000                     _U1CON0bits	set	15858
   830  0000                     _U1CON1bits	set	15859
   831  0000                     _T1CONbits	set	16306
   832  0000                     _TMR1L	set	16304
   833  0000                     _TMR1H	set	16305
   834  0000                     _T1CLK	set	16309
   835  0000                     _T1GATE	set	16308
   836  0000                     _T1GCON	set	16307
   837  0000                     _LATD	set	16317
   838  0000                     _TRISD	set	16325
   839  0000                     _LATDbits	set	16317
   840  0000                     _TRISBbits	set	16323
   841  0000                     _PORTBbits	set	16331
   842  0000                     _IVTBASEL	set	16341
   843  0000                     _IVTBASEH	set	16342
   844  0000                     _IVTBASEU	set	16343
   845  0000                     _IVTLOCKbits	set	16340
   846  0000                     _IVTLOCK	set	16340
   847  0000                     _INTCON0bits	set	16338
   848  0000                     _GIE	set	130711
   849                           
   850                           	psect	cinit
   851  000B4E                     __pcinit:
   852                           	opt stack 0
   853  000B4E                     start_initialization:
   854                           	opt stack 0
   855  000B4E                     __initialization:
   856                           	opt stack 0
   857                           
   858                           ; Clear objects allocated to BANK0 (64 bytes)
   859  000B4E  EE00  F060         	lfsr	0,__pbssBANK0
   860  000B52  0E40               	movlw	64
   861  000B54                     clear_0:
   862  000B54  6AEE               	clrf	16366,c
   863  000B56  06E8               	decf	16360,f,c
   864  000B58  E1FD               	bnz	clear_0
   865                           
   866                           ; Clear objects allocated to COMRAM (8 bytes)
   867  000B5A  EE00  F039         	lfsr	0,__pbssCOMRAM
   868  000B5E  0E08               	movlw	8
   869  000B60                     clear_1:
   870  000B60  6AEE               	clrf	16366,c
   871  000B62  06E8               	decf	16360,f,c
   872  000B64  E1FD               	bnz	clear_1
   873                           
   874                           ;
   875                           ; Setup IVTBASE
   876                           ;
   877  000B66  0E08               	movlw	(ivt0x8_base shr 0)& (0+255)
   878  000B68  6ED5               	movwf	213,c
   879  000B6A  0E00               	movlw	(ivt0x8_base shr (0+8))& (0+255)
   880  000B6C  6ED6               	movwf	214,c
   881  000B6E  0E00               	movlw	(ivt0x8_base shr (0+16))& (0+255)
   882  000B70  6ED7               	movwf	215,c
   883  000B72                     end_of_initialization:
   884                           	opt stack 0
   885  000B72                     __end_of__initialization:
   886                           	opt stack 0
   887  000B72  0E00               	movlw	low (__Lmediumconst shr (0+16))
   888  000B74  6EF8               	movwf	16376,c
   889  000B76  0100               	movlb	0
   890  000B78  EFEF  F002         	goto	_main	;jump to C main() function
   891                           
   892                           	psect	bssCOMRAM
   893  000039                     __pbssCOMRAM:
   894                           	opt stack 0
   895  000039                     _timer1_counter_value:
   896                           	opt stack 0
   897  000039                     	ds	2
   898  00003B                     _uart_command_flag:
   899                           	opt stack 0
   900  00003B                     	ds	1
   901  00003C                     _buffer_index:
   902                           	opt stack 0
   903  00003C                     	ds	1
   904  00003D                     _s_button_pressed_counter:
   905                           	opt stack 0
   906  00003D                     	ds	1
   907  00003E                     _s_red_counter:
   908                           	opt stack 0
   909  00003E                     	ds	1
   910  00003F                     _s_counter:
   911                           	opt stack 0
   912  00003F                     	ds	1
   913  000040                     _tf_state:
   914                           	opt stack 0
   915  000040                     	ds	1
   916                           
   917                           	psect	bssBANK0
   918  000060                     __pbssBANK0:
   919                           	opt stack 0
   920  000060                     _command:
   921                           	opt stack 0
   922  000060                     	ds	32
   923  000080                     _uart_rx_buffer:
   924                           	opt stack 0
   925  000080                     	ds	32
   926                           
   927                           	psect	cstackCOMRAM
   928  000001                     __pcstackCOMRAM:
   929                           	opt stack 0
   930  000001                     memcpy@d1:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x0
   934  000001                     	ds	2
   935  000003                     memcpy@s1:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x2
   939  000003                     	ds	2
   940  000005                     memcpy@n:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x4
   944  000005                     	ds	2
   945  000007                     memcpy@d:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x6
   949  000007                     	ds	2
   950  000009                     memcpy@s:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x8
   954  000009                     	ds	2
   955  00000B                     memcpy@tmp:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0xA
   959  00000B                     	ds	1
   960  00000C                     
   961                           ; 1 bytes @ 0xB
   962  00000C                     	ds	1
   963  00000D                     ??_tmr1_isr:
   964                           
   965                           ; 1 bytes @ 0xC
   966  00000D                     	ds	1
   967  00000E                     ??_isdigit:
   968  00000E                     ?_strlen:
   969                           	opt stack 0
   970  00000E                     ?_strcmp:
   971                           	opt stack 0
   972  00000E                     ?___wmul:
   973                           	opt stack 0
   974  00000E                     ?___lwdiv:
   975                           	opt stack 0
   976  00000E                     uart1_write@tx_data:
   977                           	opt stack 0
   978  00000E                     write_eeprom@data:
   979                           	opt stack 0
   980  00000E                     read_eeprom@addr:
   981                           	opt stack 0
   982  00000E                     ___wmul@multiplier:
   983                           	opt stack 0
   984  00000E                     ___lwdiv@dividend:
   985                           	opt stack 0
   986  00000E                     strcmp@s1:
   987                           	opt stack 0
   988  00000E                     strlen@s:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0xD
   992  00000E                     	ds	1
   993  00000F                     write_eeprom@addr:
   994                           	opt stack 0
   995  00000F                     _isdigit$1204:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0xE
   999  00000F                     	ds	1
  1000  000010                     ??_strlen:
  1001  000010                     write_eeprom@GIEValue:
  1002                           	opt stack 0
  1003  000010                     isdigit@c:
  1004                           	opt stack 0
  1005  000010                     ___wmul@multiplicand:
  1006                           	opt stack 0
  1007  000010                     ___lwdiv@divisor:
  1008                           	opt stack 0
  1009  000010                     strcmp@s2:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0xF
  1013  000010                     	ds	2
  1014  000012                     ??_strcmp:
  1015  000012                     ___wmul@product:
  1016                           	opt stack 0
  1017  000012                     ___lwdiv@quotient:
  1018                           	opt stack 0
  1019  000012                     strlen@cp:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x11
  1023  000012                     	ds	1
  1024  000013                     strcmp@r:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x12
  1028  000013                     	ds	1
  1029  000014                     ?_atoi:
  1030                           	opt stack 0
  1031  000014                     ___lwdiv@counter:
  1032                           	opt stack 0
  1033  000014                     uart1_write_string@s:
  1034                           	opt stack 0
  1035  000014                     atoi@s:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x13
  1039  000014                     	ds	1
  1040  000015                     ?___lwmod:
  1041                           	opt stack 0
  1042  000015                     ___lwmod@dividend:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x14
  1046  000015                     	ds	1
  1047  000016                     ??_uart1_write_string:
  1048  000016                     ??_atoi:
  1049                           
  1050                           ; 1 bytes @ 0x15
  1051  000016                     	ds	1
  1052  000017                     ___lwmod@divisor:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x16
  1056  000017                     	ds	1
  1057  000018                     atoi@sign:
  1058                           	opt stack 0
  1059  000018                     uart1_write_string@i:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x17
  1063  000018                     	ds	1
  1064  000019                     ___lwmod@counter:
  1065                           	opt stack 0
  1066  000019                     atoi@a:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x18
  1070  000019                     	ds	1
  1071  00001A                     ?_sprintf:
  1072                           	opt stack 0
  1073  00001A                     sprintf@sp:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x19
  1077  00001A                     	ds	2
  1078  00001C                     sprintf@f:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1B
  1082  00001C                     	ds	4
  1083  000020                     ??_sprintf:
  1084                           
  1085                           ; 1 bytes @ 0x1F
  1086  000020                     	ds	1
  1087  000021                     sprintf@ap:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x20
  1091  000021                     	ds	2
  1092  000023                     sprintf@flag:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x22
  1096  000023                     	ds	1
  1097  000024                     sprintf@prec:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x23
  1101  000024                     	ds	1
  1102  000025                     sprintf@val:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x24
  1106  000025                     	ds	2
  1107  000027                     sprintf@c:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x26
  1111  000027                     	ds	1
  1112  000028                     ??_command_exec:
  1113                           
  1114                           ; 1 bytes @ 0x27
  1115  000028                     	ds	1
  1116  000029                     command_exec@s_buffer:
  1117                           	opt stack 0
  1118                           
  1119                           ; 8 bytes @ 0x28
  1120  000029                     	ds	8
  1121  000031                     command_exec@c_cmd:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x30
  1125  000031                     	ds	3
  1126  000034                     command_exec@c_param:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x33
  1130  000034                     	ds	3
  1131  000037                     command_exec@value:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x36
  1135  000037                     	ds	1
  1136  000038                     main@state:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x37
  1140  000038                     	ds	1
  1141                           
  1142 ;;
  1143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1144 ;;
  1145 ;; *************** function _main *****************
  1146 ;; Defined at:
  1147 ;;		line 43 in file "main.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  state           1   55[COMRAM] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1161 ;;      Params:         0       0       0       0       0       0       0       0       0
  1162 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1164 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1165 ;;Total ram usage:        1 bytes
  1166 ;; Hardware stack levels required when called:    5
  1167 ;; This function calls:
  1168 ;;		_command_exec
  1169 ;;		_traffic_light_logic
  1170 ;;		_traffic_lights_init
  1171 ;;		_uart1_init
  1172 ;;		_uart1_write_string
  1173 ;; This function is called by:
  1174 ;;		Startup code after reset
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text0
  1179  0005DE                     __ptext0:
  1180                           	opt stack 0
  1181  0005DE                     _main:
  1182                           	opt stack 26
  1183                           
  1184                           ;main.c: 46: INTCON0bits.GIEL = 1;
  1185                           
  1186                           ;incstack = 0
  1187  0005DE  013F               	movlb	63	; () banked
  1188  0005E0  8DD2               	bsf	210,6,b	;volatile
  1189                           
  1190                           ;main.c: 47: INTCON0bits.GIEH = 1;
  1191  0005E2  8FD2               	bsf	210,7,b	;volatile
  1192                           
  1193                           ;main.c: 48: INTCON0bits.IPEN = 1;
  1194  0005E4  8BD2               	bsf	210,5,b	;volatile
  1195                           
  1196                           ; BSR set to: 63
  1197                           ;main.c: 50: uint8_t state = (uint8_t)GIE;
  1198  0005E6  0E00               	movlw	0
  1199  0005E8  BFD2               	btfsc	210,7,b	;volatile
  1200  0005EA  0E01               	movlw	1
  1201  0005EC  6E38               	movwf	main@state,c
  1202                           
  1203                           ; BSR set to: 63
  1204                           ;main.c: 51: GIE = 0;
  1205  0005EE  9FD2               	bcf	210,7,b	;volatile
  1206                           
  1207                           ;main.c: 52: IVTLOCK = 0x55;
  1208  0005F0  0E55               	movlw	85
  1209  0005F2  6FD4               	movwf	212,b	;volatile
  1210                           
  1211                           ;main.c: 53: IVTLOCK = 0xAA;
  1212  0005F4  0EAA               	movlw	170
  1213  0005F6  6FD4               	movwf	212,b	;volatile
  1214                           
  1215                           ; BSR set to: 63
  1216                           ;main.c: 54: IVTLOCKbits.IVTLOCKED = 0x00;
  1217  0005F8  91D4               	bcf	212,0,b	;volatile
  1218                           
  1219                           ;main.c: 56: IVTBASEU = 0;
  1220  0005FA  0E00               	movlw	0
  1221  0005FC  6FD7               	movwf	215,b	;volatile
  1222                           
  1223                           ;main.c: 57: IVTBASEH = 0;
  1224  0005FE  0E00               	movlw	0
  1225  000600  6FD6               	movwf	214,b	;volatile
  1226                           
  1227                           ;main.c: 58: IVTBASEL = 8;
  1228  000602  0E08               	movlw	8
  1229  000604  6FD5               	movwf	213,b	;volatile
  1230                           
  1231                           ;main.c: 62: IVTLOCK = 0x55;
  1232  000606  0E55               	movlw	85
  1233  000608  6FD4               	movwf	212,b	;volatile
  1234                           
  1235                           ;main.c: 63: IVTLOCK = 0xAA;
  1236  00060A  0EAA               	movlw	170
  1237  00060C  6FD4               	movwf	212,b	;volatile
  1238                           
  1239                           ; BSR set to: 63
  1240                           ;main.c: 64: IVTLOCKbits.IVTLOCKED = 0x01;
  1241  00060E  81D4               	bsf	212,0,b	;volatile
  1242                           
  1243                           ; BSR set to: 63
  1244                           ;main.c: 66: GIE = state;
  1245  000610  A038               	btfss	main@state,0,c
  1246  000612  D002               	goto	u1160
  1247  000614  8FD2               	bsf	210,7,b	;volatile
  1248  000616  D002               	goto	u1175
  1249  000618                     u1160:
  1250  000618  013F               	movlb	63	; () banked
  1251  00061A  9FD2               	bcf	210,7,b	;volatile
  1252  00061C                     u1175:
  1253                           
  1254                           ; BSR set to: 63
  1255                           ;main.c: 68: IPR4bits.TMR1IP = 1;
  1256  00061C  0139               	movlb	57	; () banked
  1257  00061E  8184               	bsf	132,0,b	;volatile
  1258                           
  1259                           ; BSR set to: 57
  1260                           ;main.c: 69: IPR3bits.U1RXIP = 0;
  1261  000620  9783               	bcf	131,3,b	;volatile
  1262                           
  1263                           ; BSR set to: 57
  1264                           ;main.c: 71: traffic_lights_init();
  1265  000622  ECA9  F003         	call	_traffic_lights_init	;wreg free
  1266                           
  1267                           ;main.c: 72: uart1_init();
  1268  000626  EC1B  F005         	call	_uart1_init	;wreg free
  1269                           
  1270                           ;main.c: 74: uart1_write_string("\r\n\r\n");
  1271  00062A  0E66               	movlw	low (STR_6+27)
  1272  00062C  6E14               	movwf	uart1_write_string@s,c
  1273  00062E  0E7F               	movlw	high (STR_6+27)
  1274  000630  6E15               	movwf	uart1_write_string@s+1,c
  1275  000632  EC35  F004         	call	_uart1_write_string	;wreg free
  1276                           
  1277                           ;main.c: 75: uart1_write_string("Trafikkorsning.\r\n\r\n");
  1278  000636  0ECC               	movlw	low STR_2
  1279  000638  6E14               	movwf	uart1_write_string@s,c
  1280  00063A  0E7F               	movlw	high STR_2
  1281  00063C  6E15               	movwf	uart1_write_string@s+1,c
  1282  00063E  EC35  F004         	call	_uart1_write_string	;wreg free
  1283                           
  1284                           ;main.c: 76: uart1_write_string("Inlämningsuppgift i kursen processorkunskap.\r\n");
  1285  000642  0EF3               	movlw	low STR_3
  1286  000644  6E14               	movwf	uart1_write_string@s,c
  1287  000646  0E7E               	movlw	high STR_3
  1288  000648  6E15               	movwf	uart1_write_string@s+1,c
  1289  00064A  EC35  F004         	call	_uart1_write_string	;wreg free
  1290                           
  1291                           ;main.c: 77: uart1_write_string("Av Joachim Westlund.\r\n\r\n");
  1292  00064E  0E89               	movlw	low STR_4
  1293  000650  6E14               	movwf	uart1_write_string@s,c
  1294  000652  0E7F               	movlw	high STR_4
  1295  000654  6E15               	movwf	uart1_write_string@s+1,c
  1296  000656  EC35  F004         	call	_uart1_write_string	;wreg free
  1297                           
  1298                           ;main.c: 78: uart1_write_string("UART1 initialized.\r\n");
  1299  00065A  0EB7               	movlw	low STR_5
  1300  00065C  6E14               	movwf	uart1_write_string@s,c
  1301  00065E  0E7F               	movlw	high STR_5
  1302  000660  6E15               	movwf	uart1_write_string@s+1,c
  1303  000662  EC35  F004         	call	_uart1_write_string	;wreg free
  1304                           
  1305                           ;main.c: 79: uart1_write_string("Traffic lights initialized.\r\n\r\n");
  1306  000666  0E4B               	movlw	low STR_6
  1307  000668  6E14               	movwf	uart1_write_string@s,c
  1308  00066A  0E7F               	movlw	high STR_6
  1309  00066C  6E15               	movwf	uart1_write_string@s+1,c
  1310  00066E  EC35  F004         	call	_uart1_write_string	;wreg free
  1311                           
  1312                           ;main.c: 80: uart1_write_string("Type \"help\" for commands.\r\n\r\n");
  1313  000672  0E6B               	movlw	low STR_7
  1314  000674  6E14               	movwf	uart1_write_string@s,c
  1315  000676  0E7F               	movlw	high STR_7
  1316  000678  6E15               	movwf	uart1_write_string@s+1,c
  1317  00067A  EC35  F004         	call	_uart1_write_string	;wreg free
  1318  00067E                     
  1319                           ;main.c: 83: {
  1320                           ;main.c: 85: if (PORTBbits.RB0 == 0 && tf_state == CAR_GREEN)
  1321  00067E  013F               	movlb	63	; () banked
  1322  000680  B1CB               	btfsc	203,0,b	;volatile
  1323  000682  D005               	goto	l61
  1324                           
  1325                           ; BSR set to: 63
  1326  000684  5040               	movf	_tf_state,w,c
  1327  000686  A4D8               	btfss	16344,2,c
  1328  000688  D002               	goto	l61
  1329                           
  1330                           ; BSR set to: 63
  1331                           ;main.c: 86: {
  1332                           ;main.c: 87: tf_state = BUTTON_PRESSED;
  1333  00068A  0E03               	movlw	3
  1334  00068C  6E40               	movwf	_tf_state,c
  1335  00068E                     l61:
  1336                           
  1337                           ; BSR set to: 63
  1338                           ;main.c: 88: }
  1339                           ;main.c: 90: traffic_light_logic();
  1340                           
  1341                           ; BSR set to: 63
  1342  00068E  EC4F  F003         	call	_traffic_light_logic	;wreg free
  1343                           
  1344                           ;main.c: 93: if (uart_command_flag)
  1345  000692  503B               	movf	_uart_command_flag,w,c
  1346  000694  B4D8               	btfsc	16344,2,c
  1347  000696  D7F3               	goto	l60
  1348                           
  1349                           ;main.c: 94: command_exec();
  1350  000698  EC59  F000         	call	_command_exec	;wreg free
  1351  00069C  D7F0               	goto	l60
  1352  00069E                     __end_of_main:
  1353                           	opt stack 0
  1354                           
  1355 ;; *************** function _uart1_init *****************
  1356 ;; Defined at:
  1357 ;;		line 3 in file "uart.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;		None
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;		None
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg, status,2
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1371 ;;      Params:         0       0       0       0       0       0       0       0       0
  1372 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1374 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1375 ;;Total ram usage:        0 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    2
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text1
  1386  000A36                     __ptext1:
  1387                           	opt stack 0
  1388  000A36                     _uart1_init:
  1389                           	opt stack 28
  1390                           
  1391                           ;uart.c: 5: U1CON1bits.ON = 0;
  1392                           
  1393                           ;incstack = 0
  1394  000A36  013D               	movlb	61	; () banked
  1395  000A38  9FF3               	bcf	243,7,b	;volatile
  1396                           
  1397                           ;uart.c: 9: ANSELBbits.ANSELB4 = 0;
  1398  000A3A  013A               	movlb	58	; () banked
  1399  000A3C  9950               	bcf	80,4,b	;volatile
  1400                           
  1401                           ;uart.c: 10: ANSELBbits.ANSELB5 = 0;
  1402  000A3E  9B50               	bcf	80,5,b	;volatile
  1403                           
  1404                           ;uart.c: 12: TRISBbits.TRISB4 = 0;
  1405  000A40  013F               	movlb	63	; () banked
  1406  000A42  99C3               	bcf	195,4,b	;volatile
  1407                           
  1408                           ; BSR set to: 63
  1409                           ;uart.c: 13: RB4PPS = 0b010011;
  1410  000A44  0E13               	movlw	19
  1411  000A46  013A               	movlb	58	; () banked
  1412  000A48  6F0C               	movwf	12,b	;volatile
  1413                           
  1414                           ; BSR set to: 58
  1415                           ;uart.c: 15: TRISBbits.TRISB5 = 1;
  1416  000A4A  013F               	movlb	63	; () banked
  1417  000A4C  8BC3               	bsf	195,5,b	;volatile
  1418                           
  1419                           ; BSR set to: 63
  1420                           ;uart.c: 16: U1RXPPSbits.U1RXPPS = 0b00001101;
  1421  000A4E  013A               	movlb	58	; () banked
  1422  000A50  81E5               	bsf	229,0,b	;volatile
  1423  000A52  93E5               	bcf	229,1,b	;volatile
  1424  000A54  85E5               	bsf	229,2,b	;volatile
  1425  000A56  87E5               	bsf	229,3,b	;volatile
  1426  000A58  99E5               	bcf	229,4,b	;volatile
  1427                           
  1428                           ; BSR set to: 58
  1429                           ;uart.c: 19: U1CON0bits.TXEN = 1;
  1430  000A5A  013D               	movlb	61	; () banked
  1431  000A5C  8BF2               	bsf	242,5,b	;volatile
  1432                           
  1433                           ; BSR set to: 61
  1434                           ;uart.c: 20: U1CON0bits.RXEN = 1;
  1435  000A5E  89F2               	bsf	242,4,b	;volatile
  1436                           
  1437                           ; BSR set to: 61
  1438                           ;uart.c: 21: U1CON0bits.BRGS = 1;
  1439  000A60  8FF2               	bsf	242,7,b	;volatile
  1440                           
  1441                           ; BSR set to: 61
  1442                           ;uart.c: 22: U1CON0bits.ABDEN = 0;
  1443  000A62  9DF2               	bcf	242,6,b	;volatile
  1444                           
  1445                           ; BSR set to: 61
  1446                           ;uart.c: 23: U1CON0bits.MODE = 0b0000;
  1447  000A64  91F2               	bcf	242,0,b	;volatile
  1448  000A66  93F2               	bcf	242,1,b	;volatile
  1449  000A68  95F2               	bcf	242,2,b	;volatile
  1450  000A6A  97F2               	bcf	242,3,b	;volatile
  1451                           
  1452                           ;uart.c: 40: U1BRGL = 16;
  1453  000A6C  0E10               	movlw	16
  1454  000A6E  6FF5               	movwf	245,b	;volatile
  1455                           
  1456                           ;uart.c: 41: U1BRGH = 0;
  1457  000A70  0E00               	movlw	0
  1458  000A72  6FF6               	movwf	246,b	;volatile
  1459                           
  1460                           ; BSR set to: 61
  1461                           ;uart.c: 43: PIE3bits.U1RXIE = 1;
  1462  000A74  0139               	movlb	57	; () banked
  1463  000A76  8793               	bsf	147,3,b	;volatile
  1464                           
  1465                           ; BSR set to: 57
  1466                           ;uart.c: 45: U1CON1bits.ON = 1;
  1467  000A78  013D               	movlb	61	; () banked
  1468  000A7A  8FF3               	bsf	243,7,b	;volatile
  1469                           
  1470                           ; BSR set to: 61
  1471  000A7C  0012               	return		;funcret
  1472  000A7E                     __end_of_uart1_init:
  1473                           	opt stack 0
  1474                           
  1475 ;; *************** function _traffic_lights_init *****************
  1476 ;; Defined at:
  1477 ;;		line 4 in file "traffic_lights.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, status,2, status,0, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1491 ;;      Params:         0       0       0       0       0       0       0       0       0
  1492 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1493 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1494 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1495 ;;Total ram usage:        0 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    3
  1498 ;; This function calls:
  1499 ;;		_read_eeprom
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text2
  1506  000752                     __ptext2:
  1507                           	opt stack 0
  1508  000752                     _traffic_lights_init:
  1509                           	opt stack 27
  1510                           
  1511                           ;traffic_lights.c: 7: tf_state = CAR_GREEN;
  1512                           
  1513                           ; BSR set to: 61
  1514                           ;incstack = 0
  1515  000752  0E00               	movlw	0
  1516  000754  6E40               	movwf	_tf_state,c
  1517                           
  1518                           ;traffic_lights.c: 8: s_counter = 0;
  1519  000756  0E00               	movlw	0
  1520  000758  6E3F               	movwf	_s_counter,c
  1521                           
  1522                           ;traffic_lights.c: 11: TRISD = 0x00;
  1523  00075A  0E00               	movlw	0
  1524  00075C  013F               	movlb	63	; () banked
  1525  00075E  6FC5               	movwf	197,b	;volatile
  1526                           
  1527                           ;traffic_lights.c: 12: ANSELD = 0x00;
  1528  000760  0E00               	movlw	0
  1529  000762  013A               	movlb	58	; () banked
  1530  000764  6F70               	movwf	112,b	;volatile
  1531                           
  1532                           ;traffic_lights.c: 13: LATD = 0x00;
  1533  000766  0E00               	movlw	0
  1534  000768  013F               	movlb	63	; () banked
  1535  00076A  6FBD               	movwf	189,b	;volatile
  1536                           
  1537                           ; BSR set to: 63
  1538                           ;traffic_lights.c: 15: s_transition_counter = read_eeprom(0x00);
  1539  00076C  0E00               	movlw	0
  1540  00076E  ECE5  F005         	call	_read_eeprom
  1541  000772  6E41               	movwf	_s_transition_counter,c
  1542                           
  1543                           ;traffic_lights.c: 16: if (s_transition_counter == 0 || s_transition_counter == 0xff)
  1544  000774  5041               	movf	_s_transition_counter,w,c
  1545  000776  B4D8               	btfsc	16344,2,c
  1546  000778  D003               	goto	u980
  1547  00077A  2841               	incf	_s_transition_counter,w,c
  1548  00077C  A4D8               	btfss	16344,2,c
  1549  00077E  D002               	goto	l223
  1550  000780                     u980:
  1551                           
  1552                           ;traffic_lights.c: 17: s_transition_counter = 2;
  1553  000780  0E02               	movlw	2
  1554  000782  6E41               	movwf	_s_transition_counter,c
  1555  000784                     l223:
  1556                           
  1557                           ;traffic_lights.c: 19: s_red_counter = read_eeprom(0x01);
  1558  000784  0E01               	movlw	1
  1559  000786  ECE5  F005         	call	_read_eeprom
  1560  00078A  6E3E               	movwf	_s_red_counter,c
  1561                           
  1562                           ;traffic_lights.c: 20: if (s_red_counter == 0 || s_red_counter == 0xff)
  1563  00078C  503E               	movf	_s_red_counter,w,c
  1564  00078E  B4D8               	btfsc	16344,2,c
  1565  000790  D003               	goto	u1000
  1566  000792  283E               	incf	_s_red_counter,w,c
  1567  000794  A4D8               	btfss	16344,2,c
  1568  000796  D002               	goto	l226
  1569  000798                     u1000:
  1570                           
  1571                           ;traffic_lights.c: 21: s_red_counter = 8;
  1572  000798  0E08               	movlw	8
  1573  00079A  6E3E               	movwf	_s_red_counter,c
  1574  00079C                     l226:
  1575                           
  1576                           ;traffic_lights.c: 23: s_button_pressed_counter = read_eeprom(0x02);
  1577  00079C  0E02               	movlw	2
  1578  00079E  ECE5  F005         	call	_read_eeprom
  1579  0007A2  6E3D               	movwf	_s_button_pressed_counter,c
  1580                           
  1581                           ;traffic_lights.c: 24: if (s_button_pressed_counter == 0 || s_button_pressed_counter == 
      +                          0xff)
  1582  0007A4  503D               	movf	_s_button_pressed_counter,w,c
  1583  0007A6  B4D8               	btfsc	16344,2,c
  1584  0007A8  D003               	goto	u1020
  1585  0007AA  283D               	incf	_s_button_pressed_counter,w,c
  1586  0007AC  A4D8               	btfss	16344,2,c
  1587  0007AE  D002               	goto	l229
  1588  0007B0                     u1020:
  1589                           
  1590                           ;traffic_lights.c: 25: s_button_pressed_counter = 2;
  1591  0007B0  0E02               	movlw	2
  1592  0007B2  6E3D               	movwf	_s_button_pressed_counter,c
  1593  0007B4                     l229:
  1594                           
  1595                           ;traffic_lights.c: 28: TRISBbits.TRISB0 = 1;
  1596  0007B4  013F               	movlb	63	; () banked
  1597  0007B6  81C3               	bsf	195,0,b	;volatile
  1598                           
  1599                           ; BSR set to: 63
  1600                           ;traffic_lights.c: 29: ANSELBbits.ANSELB0 = 0;
  1601  0007B8  013A               	movlb	58	; () banked
  1602  0007BA  9150               	bcf	80,0,b	;volatile
  1603                           
  1604                           ;traffic_lights.c: 35: timer1_counter_value = 0x85ee;
  1605  0007BC  0E85               	movlw	133
  1606  0007BE  6E3A               	movwf	_timer1_counter_value+1,c
  1607  0007C0  0EEE               	movlw	238
  1608  0007C2  6E39               	movwf	_timer1_counter_value,c
  1609                           
  1610                           ;traffic_lights.c: 38: T1GCON = 0x00;
  1611  0007C4  0E00               	movlw	0
  1612  0007C6  013F               	movlb	63	; () banked
  1613  0007C8  6FB3               	movwf	179,b	;volatile
  1614                           
  1615                           ;traffic_lights.c: 41: T1GATE = 0x00;
  1616  0007CA  0E00               	movlw	0
  1617  0007CC  6FB4               	movwf	180,b	;volatile
  1618                           
  1619                           ;traffic_lights.c: 44: T1CLK = 0x06;
  1620  0007CE  0E06               	movlw	6
  1621  0007D0  6FB5               	movwf	181,b	;volatile
  1622                           
  1623                           ;traffic_lights.c: 46: TMR1H = (uint8_t)((timer1_counter_value >> 8) & 0xff);
  1624  0007D2  503A               	movf	_timer1_counter_value+1,w,c
  1625  0007D4  6FB1               	movwf	177,b	;volatile
  1626                           
  1627                           ; BSR set to: 63
  1628                           ;traffic_lights.c: 47: TMR1L = (uint8_t)((timer1_counter_value) & 0xff);
  1629  0007D6  0060  F0E7  FFB0   	movff	_timer1_counter_value,16304	;volatile
  1630                           
  1631                           ; BSR set to: 63
  1632                           ;traffic_lights.c: 49: PIR4bits.TMR1IF = 0;
  1633  0007DC  0139               	movlb	57	; () banked
  1634  0007DE  91A4               	bcf	164,0,b	;volatile
  1635                           
  1636                           ; BSR set to: 57
  1637                           ;traffic_lights.c: 51: PIE4bits.TMR1IE = 1;
  1638  0007E0  8194               	bsf	148,0,b	;volatile
  1639                           
  1640                           ; BSR set to: 57
  1641                           ;traffic_lights.c: 53: T1CONbits.RD16 = 1;
  1642  0007E2  013F               	movlb	63	; () banked
  1643  0007E4  83B2               	bsf	178,1,b	;volatile
  1644                           
  1645                           ;traffic_lights.c: 54: T1CONbits.CKPS = 0b000;
  1646  0007E6  0ECF               	movlw	-49
  1647  0007E8  17B2               	andwf	178,f,b	;volatile
  1648                           
  1649                           ; BSR set to: 63
  1650                           ;traffic_lights.c: 55: T1CONbits.NOT_SYNC = 0;
  1651  0007EA  95B2               	bcf	178,2,b	;volatile
  1652                           
  1653                           ; BSR set to: 63
  1654                           ;traffic_lights.c: 56: T1CONbits.ON = 1;
  1655  0007EC  81B2               	bsf	178,0,b	;volatile
  1656                           
  1657                           ; BSR set to: 63
  1658  0007EE  0012               	return		;funcret
  1659  0007F0                     __end_of_traffic_lights_init:
  1660                           	opt stack 0
  1661                           
  1662 ;; *************** function _traffic_light_logic *****************
  1663 ;; Defined at:
  1664 ;;		line 100 in file "traffic_lights.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         0       0       0       0       0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    3
  1685 ;; This function calls:
  1686 ;;		_reset_timer1
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text3
  1693  00069E                     __ptext3:
  1694                           	opt stack 0
  1695  00069E                     _traffic_light_logic:
  1696                           	opt stack 27
  1697                           
  1698                           ;traffic_lights.c: 102: switch(tf_state)
  1699                           
  1700                           ; BSR set to: 63
  1701                           ;incstack = 0
  1702  00069E  D045               	goto	l245
  1703  0006A0                     l246:
  1704                           
  1705                           ;traffic_lights.c: 105: LATDbits.LATD5 = 1;
  1706  0006A0  013F               	movlb	63	; () banked
  1707  0006A2  8BBD               	bsf	189,5,b	;volatile
  1708                           
  1709                           ;traffic_lights.c: 106: LATDbits.LATD6 = 0;
  1710  0006A4  9DBD               	bcf	189,6,b	;volatile
  1711                           
  1712                           ;traffic_lights.c: 107: LATDbits.LATD7 = 0;
  1713  0006A6  9FBD               	bcf	189,7,b	;volatile
  1714                           
  1715                           ;traffic_lights.c: 108: LATDbits.LATD4 = 1;
  1716  0006A8  89BD               	bsf	189,4,b	;volatile
  1717                           
  1718                           ;traffic_lights.c: 109: LATDbits.LATD3 = 0;
  1719  0006AA  97BD               	bcf	189,3,b	;volatile
  1720                           
  1721                           ;traffic_lights.c: 110: LATDbits.LATD0 = 0;
  1722  0006AC  91BD               	bcf	189,0,b	;volatile
  1723                           
  1724                           ;traffic_lights.c: 111: break;
  1725  0006AE  0012               	return	
  1726  0006B0                     
  1727                           ;traffic_lights.c: 113: if (s_counter == s_button_pressed_counter)
  1728                           
  1729                           ; BSR set to: 63
  1730  0006B0  503D               	movf	_s_button_pressed_counter,w,c
  1731  0006B2  183F               	xorwf	_s_counter,w,c
  1732  0006B4  A4D8               	btfss	16344,2,c
  1733  0006B6  0012               	return	
  1734                           
  1735                           ;traffic_lights.c: 114: {
  1736                           ;traffic_lights.c: 115: LATDbits.LATD5 = 0;
  1737  0006B8  013F               	movlb	63	; () banked
  1738  0006BA  9BBD               	bcf	189,5,b	;volatile
  1739                           
  1740                           ;traffic_lights.c: 116: LATDbits.LATD6 = 1;
  1741  0006BC  8DBD               	bsf	189,6,b	;volatile
  1742                           
  1743                           ;traffic_lights.c: 117: LATDbits.LATD7 = 0;
  1744  0006BE  9FBD               	bcf	189,7,b	;volatile
  1745                           
  1746                           ;traffic_lights.c: 118: LATDbits.LATD4 = 1;
  1747  0006C0  89BD               	bsf	189,4,b	;volatile
  1748                           
  1749                           ;traffic_lights.c: 119: LATDbits.LATD3 = 0;
  1750  0006C2  97BD               	bcf	189,3,b	;volatile
  1751                           
  1752                           ; BSR set to: 63
  1753                           ;traffic_lights.c: 120: reset_timer1();
  1754  0006C4  ECF2  F005         	call	_reset_timer1	;wreg free
  1755                           
  1756                           ;traffic_lights.c: 121: tf_state = CAR_RED;
  1757  0006C8  0E02               	movlw	2
  1758  0006CA  6E40               	movwf	_tf_state,c
  1759                           
  1760                           ;traffic_lights.c: 122: }
  1761                           ;traffic_lights.c: 123: break;
  1762  0006CC  0012               	return	
  1763  0006CE                     
  1764                           ;traffic_lights.c: 125: if (s_counter == s_transition_counter)
  1765  0006CE  5041               	movf	_s_transition_counter,w,c
  1766  0006D0  183F               	xorwf	_s_counter,w,c
  1767  0006D2  A4D8               	btfss	16344,2,c
  1768  0006D4  0012               	return	
  1769                           
  1770                           ;traffic_lights.c: 126: {
  1771                           ;traffic_lights.c: 127: LATDbits.LATD5 = 0;
  1772  0006D6  013F               	movlb	63	; () banked
  1773  0006D8  9BBD               	bcf	189,5,b	;volatile
  1774                           
  1775                           ;traffic_lights.c: 128: LATDbits.LATD6 = 0;
  1776  0006DA  9DBD               	bcf	189,6,b	;volatile
  1777                           
  1778                           ;traffic_lights.c: 129: LATDbits.LATD7 = 1;
  1779  0006DC  8FBD               	bsf	189,7,b	;volatile
  1780                           
  1781                           ;traffic_lights.c: 130: LATDbits.LATD4 = 0;
  1782  0006DE  99BD               	bcf	189,4,b	;volatile
  1783                           
  1784                           ;traffic_lights.c: 131: LATDbits.LATD3 = 1;
  1785  0006E0  87BD               	bsf	189,3,b	;volatile
  1786                           
  1787                           ; BSR set to: 63
  1788                           ;traffic_lights.c: 132: reset_timer1();
  1789  0006E2  ECF2  F005         	call	_reset_timer1	;wreg free
  1790                           
  1791                           ;traffic_lights.c: 133: tf_state = GREEN_PEDESTRIAN;
  1792  0006E6  0E04               	movlw	4
  1793  0006E8  6E40               	movwf	_tf_state,c
  1794                           
  1795                           ;traffic_lights.c: 134: }
  1796                           ;traffic_lights.c: 135: break;
  1797  0006EA  0012               	return	
  1798  0006EC                     
  1799                           ;traffic_lights.c: 137: if (s_counter == s_red_counter)
  1800  0006EC  503E               	movf	_s_red_counter,w,c
  1801  0006EE  183F               	xorwf	_s_counter,w,c
  1802  0006F0  A4D8               	btfss	16344,2,c
  1803  0006F2  0012               	return	
  1804                           
  1805                           ;traffic_lights.c: 138: {
  1806                           ;traffic_lights.c: 139: LATDbits.LATD5 = 0;
  1807  0006F4  013F               	movlb	63	; () banked
  1808  0006F6  9BBD               	bcf	189,5,b	;volatile
  1809                           
  1810                           ;traffic_lights.c: 140: LATDbits.LATD6 = 1;
  1811  0006F8  8DBD               	bsf	189,6,b	;volatile
  1812                           
  1813                           ;traffic_lights.c: 141: LATDbits.LATD7 = 0;
  1814  0006FA  9FBD               	bcf	189,7,b	;volatile
  1815                           
  1816                           ;traffic_lights.c: 142: LATDbits.LATD4 = 1;
  1817  0006FC  89BD               	bsf	189,4,b	;volatile
  1818                           
  1819                           ;traffic_lights.c: 143: LATDbits.LATD3 = 0;
  1820  0006FE  97BD               	bcf	189,3,b	;volatile
  1821                           
  1822                           ; BSR set to: 63
  1823                           ;traffic_lights.c: 144: reset_timer1();
  1824  000700  ECF2  F005         	call	_reset_timer1	;wreg free
  1825                           
  1826                           ;traffic_lights.c: 145: tf_state = YELLOW_REVERSE_ORDER;
  1827  000704  0E05               	movlw	5
  1828  000706  6E40               	movwf	_tf_state,c
  1829                           
  1830                           ;traffic_lights.c: 146: }
  1831                           ;traffic_lights.c: 147: break;
  1832  000708  0012               	return	
  1833  00070A                     
  1834                           ;traffic_lights.c: 149: if (s_counter == s_transition_counter)
  1835  00070A  5041               	movf	_s_transition_counter,w,c
  1836  00070C  183F               	xorwf	_s_counter,w,c
  1837  00070E  A4D8               	btfss	16344,2,c
  1838  000710  0012               	return	
  1839                           
  1840                           ;traffic_lights.c: 150: {
  1841                           ;traffic_lights.c: 151: reset_timer1();
  1842  000712  ECF2  F005         	call	_reset_timer1	;wreg free
  1843                           
  1844                           ;traffic_lights.c: 152: tf_state = CAR_GREEN;
  1845  000716  0E00               	movlw	0
  1846  000718  6E40               	movwf	_tf_state,c
  1847                           
  1848                           ;traffic_lights.c: 153: }
  1849                           ;traffic_lights.c: 154: break;
  1850  00071A  0012               	return	
  1851  00071C                     l256:
  1852                           
  1853                           ;traffic_lights.c: 156: LATDbits.LATD0 = 1;
  1854  00071C  013F               	movlb	63	; () banked
  1855  00071E  81BD               	bsf	189,0,b	;volatile
  1856                           
  1857                           ; BSR set to: 63
  1858                           ;traffic_lights.c: 157: reset_timer1();
  1859  000720  ECF2  F005         	call	_reset_timer1	;wreg free
  1860                           
  1861                           ;traffic_lights.c: 158: tf_state = CAR_YELLOW;
  1862  000724  0E01               	movlw	1
  1863  000726  6E40               	movwf	_tf_state,c
  1864                           
  1865                           ;traffic_lights.c: 160: }
  1866                           
  1867                           ;traffic_lights.c: 159: break;
  1868  000728  0012               	return	
  1869  00072A                     l245:
  1870  00072A  5040               	movf	_tf_state,w,c
  1871                           
  1872                           ; Switch size 1, requested type "space"
  1873                           ; Number of cases is 6, Range of values is 0 to 5
  1874                           ; switch strategies available:
  1875                           ; Name         Instructions Cycles
  1876                           ; simple_byte           19    10 (average)
  1877                           ;	Chosen strategy is simple_byte
  1878  00072C  0A00               	xorlw	0	; case 0
  1879  00072E  B4D8               	btfsc	16344,2,c
  1880  000730  D7B7               	goto	l246
  1881  000732  0A01               	xorlw	1	; case 1
  1882  000734  B4D8               	btfsc	16344,2,c
  1883  000736  D7BC               	goto	l248
  1884  000738  0A03               	xorlw	3	; case 2
  1885  00073A  B4D8               	btfsc	16344,2,c
  1886  00073C  D7C8               	goto	l250
  1887  00073E  0A01               	xorlw	1	; case 3
  1888  000740  B4D8               	btfsc	16344,2,c
  1889  000742  D7EC               	goto	l256
  1890  000744  0A07               	xorlw	7	; case 4
  1891  000746  B4D8               	btfsc	16344,2,c
  1892  000748  D7D1               	goto	l252
  1893  00074A  0A01               	xorlw	1	; case 5
  1894  00074C  A4D8               	btfss	16344,2,c
  1895  00074E  0012               	return	
  1896  000750  D7DC               	goto	l254
  1897  000752                     __end_of_traffic_light_logic:
  1898                           	opt stack 0
  1899                           
  1900 ;; *************** function _reset_timer1 *****************
  1901 ;; Defined at:
  1902 ;;		line 86 in file "traffic_lights.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    2
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_traffic_light_logic
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text4
  1931  000BE4                     __ptext4:
  1932                           	opt stack 0
  1933  000BE4                     _reset_timer1:
  1934                           	opt stack 27
  1935                           
  1936                           ;traffic_lights.c: 89: T1CONbits.TMR1ON = 0;
  1937                           
  1938                           ;incstack = 0
  1939  000BE4  013F               	movlb	63	; () banked
  1940  000BE6  91B2               	bcf	178,0,b	;volatile
  1941                           
  1942                           ; BSR set to: 63
  1943                           ;traffic_lights.c: 91: TMR1H = (uint8_t)((timer1_counter_value >> 8) & 0xff);
  1944  000BE8  503A               	movf	_timer1_counter_value+1,w,c
  1945  000BEA  6FB1               	movwf	177,b	;volatile
  1946                           
  1947                           ; BSR set to: 63
  1948                           ;traffic_lights.c: 92: TMR1L = (uint8_t)((timer1_counter_value) & 0xff);
  1949  000BEC  0060  F0E7  FFB0   	movff	_timer1_counter_value,16304	;volatile
  1950                           
  1951                           ; BSR set to: 63
  1952                           ;traffic_lights.c: 95: T1CONbits.TMR1ON = 1;
  1953  000BF2  81B2               	bsf	178,0,b	;volatile
  1954                           
  1955                           ;traffic_lights.c: 97: s_counter = 0;
  1956  000BF4  0E00               	movlw	0
  1957  000BF6  6E3F               	movwf	_s_counter,c
  1958                           
  1959                           ; BSR set to: 63
  1960  000BF8  0012               	return		;funcret
  1961  000BFA                     __end_of_reset_timer1:
  1962                           	opt stack 0
  1963                           
  1964 ;; *************** function _command_exec *****************
  1965 ;; Defined at:
  1966 ;;		line 95 in file "uart.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  s_buffer        8   40[COMRAM] unsigned char [8]
  1971 ;;  c_param         3   51[COMRAM] unsigned char [3]
  1972 ;;  c_cmd           3   48[COMRAM] unsigned char [3]
  1973 ;;  value           1   54[COMRAM] unsigned char 
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  1    wreg      void 
  1976 ;; Registers used:
  1977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1983 ;;      Params:         0       0       0       0       0       0       0       0       0
  1984 ;;      Locals:        15       0       0       0       0       0       0       0       0
  1985 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1986 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1987 ;;Total ram usage:       16 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    4
  1990 ;; This function calls:
  1991 ;;		_atoi
  1992 ;;		_read_eeprom
  1993 ;;		_sprintf
  1994 ;;		_strcmp
  1995 ;;		_strlen
  1996 ;;		_uart1_write_string
  1997 ;;		_write_eeprom
  1998 ;; This function is called by:
  1999 ;;		_main
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text5
  2004  0000B2                     __ptext5:
  2005                           	opt stack 0
  2006  0000B2                     _command_exec:
  2007                           	opt stack 26
  2008                           
  2009                           ;uart.c: 98: uint8_t s_buffer[8];
  2010                           ;uart.c: 102: uint8_t c_cmd[3];
  2011                           ;uart.c: 103: uint8_t c_param[3];
  2012                           ;uart.c: 104: uint8_t value = 0;
  2013                           
  2014                           ; BSR set to: 63
  2015                           ;incstack = 0
  2016  0000B2  0E00               	movlw	0
  2017  0000B4  6E37               	movwf	command_exec@value,c
  2018                           
  2019                           ;uart.c: 106: if (strlen(command) != 4)
  2020  0000B6  0E60               	movlw	low _command
  2021  0000B8  6E0E               	movwf	strlen@s,c
  2022  0000BA  0E00               	movlw	high _command
  2023  0000BC  6E0F               	movwf	strlen@s+1,c
  2024  0000BE  EC67  F004         	call	_strlen	;wreg free
  2025  0000C2  0E04               	movlw	4
  2026  0000C4  180E               	xorwf	?_strlen,w,c
  2027  0000C6  100F               	iorwf	?_strlen+1,w,c
  2028  0000C8  B4D8               	btfsc	16344,2,c
  2029  0000CA  D009               	goto	l160
  2030                           
  2031                           ;uart.c: 107: {
  2032                           ;uart.c: 108: uart1_write_string("A command has to be 4 characters long.\r\n");
  2033  0000CC  0E22               	movlw	low STR_8
  2034  0000CE  6E14               	movwf	uart1_write_string@s,c
  2035  0000D0  0E7F               	movlw	high STR_8
  2036  0000D2  6E15               	movwf	uart1_write_string@s+1,c
  2037  0000D4  EC35  F004         	call	_uart1_write_string	;wreg free
  2038                           
  2039                           ;uart.c: 109: uart_command_flag = 0;
  2040  0000D8  0E00               	movlw	0
  2041  0000DA  6E3B               	movwf	_uart_command_flag,c
  2042                           
  2043                           ;uart.c: 110: return;
  2044  0000DC  0012               	return	
  2045  0000DE                     l160:
  2046                           
  2047                           ;uart.c: 111: }
  2048                           ;uart.c: 113: c_cmd[0] = command[0];
  2049  0000DE  0060  F180  F031   	movff	_command,command_exec@c_cmd
  2050                           
  2051                           ;uart.c: 114: c_cmd[1] = command[1];
  2052  0000E4  0060  F184  F032   	movff	_command+1,command_exec@c_cmd+1
  2053                           
  2054                           ;uart.c: 115: c_cmd[2] = 0;
  2055  0000EA  0E00               	movlw	0
  2056  0000EC  6E33               	movwf	command_exec@c_cmd+2,c
  2057                           
  2058                           ;uart.c: 116: c_param[0] = command[2];
  2059  0000EE  0060  F188  F034   	movff	_command+2,command_exec@c_param
  2060                           
  2061                           ;uart.c: 117: c_param[1] = command[3];
  2062  0000F4  0060  F18C  F035   	movff	_command+3,command_exec@c_param+1
  2063                           
  2064                           ;uart.c: 118: c_param[2] = 0;
  2065  0000FA  0E00               	movlw	0
  2066  0000FC  6E36               	movwf	command_exec@c_param+2,c
  2067                           
  2068                           ;uart.c: 120: if (strcmp("LED2", command) == 0)
  2069  0000FE  0EEB               	movlw	low STR_9
  2070  000100  6E0E               	movwf	strcmp@s1,c
  2071  000102  0E7F               	movlw	high STR_9
  2072  000104  6E0F               	movwf	strcmp@s1+1,c
  2073  000106  0E60               	movlw	low _command
  2074  000108  6E10               	movwf	strcmp@s2,c
  2075  00010A  0E00               	movlw	high _command
  2076  00010C  6E11               	movwf	strcmp@s2+1,c
  2077  00010E  EC98  F004         	call	_strcmp	;wreg free
  2078  000112  500E               	movf	?_strcmp,w,c
  2079  000114  100F               	iorwf	?_strcmp+1,w,c
  2080  000116  A4D8               	btfss	16344,2,c
  2081  000118  D016               	goto	l162
  2082                           
  2083                           ;uart.c: 121: {
  2084                           ;uart.c: 122: LATDbits.LATD2 = ~LATDbits.LATD2;
  2085  00011A  013F               	movlb	63	; () banked
  2086  00011C  A5BD               	btfss	189,2,b	;volatile
  2087  00011E  D002               	goto	u1050
  2088  000120  0E01               	movlw	1
  2089  000122  D001               	goto	u1056
  2090  000124                     u1050:
  2091  000124  0E00               	movlw	0
  2092  000126                     u1056:
  2093  000126  0AFF               	xorlw	255
  2094  000128  6E28               	movwf	??_command_exec& (0+255),c
  2095  00012A  4628               	rlncf	??_command_exec,f,c
  2096  00012C  4628               	rlncf	??_command_exec,f,c
  2097  00012E  51BD               	movf	189,w,b	;volatile
  2098  000130  1828               	xorwf	??_command_exec,w,c
  2099  000132  0BFB               	andlw	-5
  2100  000134  1828               	xorwf	??_command_exec,w,c
  2101  000136  6FBD               	movwf	189,b	;volatile
  2102                           
  2103                           ; BSR set to: 63
  2104                           ;uart.c: 123: uart1_write_string("OK.\r\n");
  2105  000138  0EE0               	movlw	low STR_10
  2106  00013A  6E14               	movwf	uart1_write_string@s,c
  2107  00013C  0E7F               	movlw	high STR_10
  2108  00013E  6E15               	movwf	uart1_write_string@s+1,c
  2109  000140  EC35  F004         	call	_uart1_write_string	;wreg free
  2110                           
  2111                           ;uart.c: 124: }
  2112  000144  D10E               	goto	l178
  2113  000146                     l162:
  2114                           
  2115                           ;uart.c: 125: else if (strcmp("TT", c_cmd) == 0)
  2116  000146  0EFC               	movlw	low (STR_22+2)
  2117  000148  6E0E               	movwf	strcmp@s1,c
  2118  00014A  0E7F               	movlw	high (STR_22+2)
  2119  00014C  6E0F               	movwf	strcmp@s1+1,c
  2120  00014E  0E31               	movlw	low command_exec@c_cmd
  2121  000150  6E10               	movwf	strcmp@s2,c
  2122  000152  0E00               	movlw	high command_exec@c_cmd
  2123  000154  6E11               	movwf	strcmp@s2+1,c
  2124  000156  EC98  F004         	call	_strcmp	;wreg free
  2125  00015A  500E               	movf	?_strcmp,w,c
  2126  00015C  100F               	iorwf	?_strcmp+1,w,c
  2127  00015E  A4D8               	btfss	16344,2,c
  2128  000160  D024               	goto	l164
  2129                           
  2130                           ;uart.c: 126: {
  2131                           ;uart.c: 127: value = (uint8_t)atoi(c_param);
  2132  000162  0E34               	movlw	low command_exec@c_param
  2133  000164  6E14               	movwf	atoi@s,c
  2134  000166  0E00               	movlw	high command_exec@c_param
  2135  000168  6E15               	movwf	atoi@s+1,c
  2136  00016A  EC74  F002         	call	_atoi	;wreg free
  2137  00016E  5014               	movf	?_atoi,w,c
  2138  000170  6E37               	movwf	command_exec@value,c
  2139                           
  2140                           ;uart.c: 128: if (value == 0)
  2141  000172  5037               	movf	command_exec@value,w,c
  2142  000174  A4D8               	btfss	16344,2,c
  2143  000176  D009               	goto	l165
  2144                           
  2145                           ;uart.c: 129: {
  2146                           ;uart.c: 130: uart1_write_string("Not a valid number\r\n");
  2147  000178  0EA2               	movlw	low STR_12
  2148  00017A  6E14               	movwf	uart1_write_string@s,c
  2149  00017C  0E7F               	movlw	high STR_12
  2150  00017E  6E15               	movwf	uart1_write_string@s+1,c
  2151  000180  EC35  F004         	call	_uart1_write_string	;wreg free
  2152                           
  2153                           ;uart.c: 131: uart_command_flag = 0;
  2154  000184  0E00               	movlw	0
  2155  000186  6E3B               	movwf	_uart_command_flag,c
  2156                           
  2157                           ;uart.c: 132: return;
  2158  000188  0012               	return	
  2159  00018A                     l165:
  2160                           
  2161                           ;uart.c: 133: }
  2162                           ;uart.c: 134: write_eeprom(0x00, value);
  2163  00018A  0060  F0DC  F00E   	movff	command_exec@value,write_eeprom@data
  2164  000190  0E00               	movlw	0
  2165  000192  EC3F  F005         	call	_write_eeprom
  2166                           
  2167                           ;uart.c: 135: s_transition_counter = value;
  2168  000196  0060  F0DC  F041   	movff	command_exec@value,_s_transition_counter
  2169                           
  2170                           ;uart.c: 136: uart1_write_string("OK.\r\n");
  2171  00019C  0EE0               	movlw	low STR_10
  2172  00019E  6E14               	movwf	uart1_write_string@s,c
  2173  0001A0  0E7F               	movlw	high STR_10
  2174  0001A2  6E15               	movwf	uart1_write_string@s+1,c
  2175  0001A4  EC35  F004         	call	_uart1_write_string	;wreg free
  2176                           
  2177                           ;uart.c: 137: }
  2178  0001A8  D0DC               	goto	l178
  2179  0001AA                     l164:
  2180                           
  2181                           ;uart.c: 138: else if (strcmp("RT", c_cmd) == 0)
  2182  0001AA  0EF7               	movlw	low (STR_20+2)
  2183  0001AC  6E0E               	movwf	strcmp@s1,c
  2184  0001AE  0E7F               	movlw	high (STR_20+2)
  2185  0001B0  6E0F               	movwf	strcmp@s1+1,c
  2186  0001B2  0E31               	movlw	low command_exec@c_cmd
  2187  0001B4  6E10               	movwf	strcmp@s2,c
  2188  0001B6  0E00               	movlw	high command_exec@c_cmd
  2189  0001B8  6E11               	movwf	strcmp@s2+1,c
  2190  0001BA  EC98  F004         	call	_strcmp	;wreg free
  2191  0001BE  500E               	movf	?_strcmp,w,c
  2192  0001C0  100F               	iorwf	?_strcmp+1,w,c
  2193  0001C2  A4D8               	btfss	16344,2,c
  2194  0001C4  D024               	goto	l167
  2195                           
  2196                           ;uart.c: 139: {
  2197                           ;uart.c: 140: value = (uint8_t)atoi(c_param);
  2198  0001C6  0E34               	movlw	low command_exec@c_param
  2199  0001C8  6E14               	movwf	atoi@s,c
  2200  0001CA  0E00               	movlw	high command_exec@c_param
  2201  0001CC  6E15               	movwf	atoi@s+1,c
  2202  0001CE  EC74  F002         	call	_atoi	;wreg free
  2203  0001D2  5014               	movf	?_atoi,w,c
  2204  0001D4  6E37               	movwf	command_exec@value,c
  2205                           
  2206                           ;uart.c: 141: if (value == 0)
  2207  0001D6  5037               	movf	command_exec@value,w,c
  2208  0001D8  A4D8               	btfss	16344,2,c
  2209  0001DA  D009               	goto	l168
  2210                           
  2211                           ;uart.c: 142: {
  2212                           ;uart.c: 143: uart1_write_string("Not a valid number\r\n");
  2213  0001DC  0EA2               	movlw	low STR_12
  2214  0001DE  6E14               	movwf	uart1_write_string@s,c
  2215  0001E0  0E7F               	movlw	high STR_12
  2216  0001E2  6E15               	movwf	uart1_write_string@s+1,c
  2217  0001E4  EC35  F004         	call	_uart1_write_string	;wreg free
  2218                           
  2219                           ;uart.c: 144: uart_command_flag = 0;
  2220  0001E8  0E00               	movlw	0
  2221  0001EA  6E3B               	movwf	_uart_command_flag,c
  2222                           
  2223                           ;uart.c: 145: return;
  2224  0001EC  0012               	return	
  2225  0001EE                     l168:
  2226                           
  2227                           ;uart.c: 146: }
  2228                           ;uart.c: 147: write_eeprom(0x01, value);
  2229  0001EE  0060  F0DC  F00E   	movff	command_exec@value,write_eeprom@data
  2230  0001F4  0E01               	movlw	1
  2231  0001F6  EC3F  F005         	call	_write_eeprom
  2232                           
  2233                           ;uart.c: 148: s_red_counter = value;
  2234  0001FA  0060  F0DC  F03E   	movff	command_exec@value,_s_red_counter
  2235                           
  2236                           ;uart.c: 149: uart1_write_string("OK.\r\n");
  2237  000200  0EE0               	movlw	low STR_10
  2238  000202  6E14               	movwf	uart1_write_string@s,c
  2239  000204  0E7F               	movlw	high STR_10
  2240  000206  6E15               	movwf	uart1_write_string@s+1,c
  2241  000208  EC35  F004         	call	_uart1_write_string	;wreg free
  2242                           
  2243                           ;uart.c: 150: }
  2244  00020C  D0AA               	goto	l178
  2245  00020E                     l167:
  2246                           
  2247                           ;uart.c: 151: else if (strcmp("BP", c_cmd) == 0)
  2248  00020E  0EF2               	movlw	low (STR_24+2)
  2249  000210  6E0E               	movwf	strcmp@s1,c
  2250  000212  0E7F               	movlw	high (STR_24+2)
  2251  000214  6E0F               	movwf	strcmp@s1+1,c
  2252  000216  0E31               	movlw	low command_exec@c_cmd
  2253  000218  6E10               	movwf	strcmp@s2,c
  2254  00021A  0E00               	movlw	high command_exec@c_cmd
  2255  00021C  6E11               	movwf	strcmp@s2+1,c
  2256  00021E  EC98  F004         	call	_strcmp	;wreg free
  2257  000222  500E               	movf	?_strcmp,w,c
  2258  000224  100F               	iorwf	?_strcmp+1,w,c
  2259  000226  A4D8               	btfss	16344,2,c
  2260  000228  D024               	goto	l170
  2261                           
  2262                           ;uart.c: 152: {
  2263                           ;uart.c: 153: value = (uint8_t)atoi(c_param);
  2264  00022A  0E34               	movlw	low command_exec@c_param
  2265  00022C  6E14               	movwf	atoi@s,c
  2266  00022E  0E00               	movlw	high command_exec@c_param
  2267  000230  6E15               	movwf	atoi@s+1,c
  2268  000232  EC74  F002         	call	_atoi	;wreg free
  2269  000236  5014               	movf	?_atoi,w,c
  2270  000238  6E37               	movwf	command_exec@value,c
  2271                           
  2272                           ;uart.c: 154: if (value == 0)
  2273  00023A  5037               	movf	command_exec@value,w,c
  2274  00023C  A4D8               	btfss	16344,2,c
  2275  00023E  D009               	goto	l171
  2276                           
  2277                           ;uart.c: 155: {
  2278                           ;uart.c: 156: uart1_write_string("Not a valid number\r\n");
  2279  000240  0EA2               	movlw	low STR_12
  2280  000242  6E14               	movwf	uart1_write_string@s,c
  2281  000244  0E7F               	movlw	high STR_12
  2282  000246  6E15               	movwf	uart1_write_string@s+1,c
  2283  000248  EC35  F004         	call	_uart1_write_string	;wreg free
  2284                           
  2285                           ;uart.c: 157: uart_command_flag = 0;
  2286  00024C  0E00               	movlw	0
  2287  00024E  6E3B               	movwf	_uart_command_flag,c
  2288                           
  2289                           ;uart.c: 158: return;
  2290  000250  0012               	return	
  2291  000252                     l171:
  2292                           
  2293                           ;uart.c: 159: }
  2294                           ;uart.c: 160: write_eeprom(0x02, value);
  2295  000252  0060  F0DC  F00E   	movff	command_exec@value,write_eeprom@data
  2296  000258  0E02               	movlw	2
  2297  00025A  EC3F  F005         	call	_write_eeprom
  2298                           
  2299                           ;uart.c: 161: s_button_pressed_counter = value;
  2300  00025E  0060  F0DC  F03D   	movff	command_exec@value,_s_button_pressed_counter
  2301                           
  2302                           ;uart.c: 162: uart1_write_string("OK.\r\n");
  2303  000264  0EE0               	movlw	low STR_10
  2304  000266  6E14               	movwf	uart1_write_string@s,c
  2305  000268  0E7F               	movlw	high STR_10
  2306  00026A  6E15               	movwf	uart1_write_string@s+1,c
  2307  00026C  EC35  F004         	call	_uart1_write_string	;wreg free
  2308                           
  2309                           ;uart.c: 163: }
  2310  000270  D078               	goto	l178
  2311  000272                     l170:
  2312                           
  2313                           ;uart.c: 164: else if (strcmp("RERT", command) == 0)
  2314  000272  0EF5               	movlw	low STR_20
  2315  000274  6E0E               	movwf	strcmp@s1,c
  2316  000276  0E7F               	movlw	high STR_20
  2317  000278  6E0F               	movwf	strcmp@s1+1,c
  2318  00027A  0E60               	movlw	low _command
  2319  00027C  6E10               	movwf	strcmp@s2,c
  2320  00027E  0E00               	movlw	high _command
  2321  000280  6E11               	movwf	strcmp@s2+1,c
  2322  000282  EC98  F004         	call	_strcmp	;wreg free
  2323  000286  500E               	movf	?_strcmp,w,c
  2324  000288  100F               	iorwf	?_strcmp+1,w,c
  2325  00028A  A4D8               	btfss	16344,2,c
  2326  00028C  D018               	goto	l173
  2327                           
  2328                           ;uart.c: 165: {
  2329                           ;uart.c: 166: sprintf(s_buffer, "%d\r\n", read_eeprom(0x01));
  2330  00028E  0E29               	movlw	low command_exec@s_buffer
  2331  000290  6E1A               	movwf	sprintf@sp,c
  2332  000292  0E00               	movlw	high command_exec@s_buffer
  2333  000294  6E1B               	movwf	sprintf@sp+1,c
  2334  000296  0EE6               	movlw	low STR_21
  2335  000298  6E1C               	movwf	sprintf@f,c
  2336  00029A  0E7F               	movlw	high STR_21
  2337  00029C  6E1D               	movwf	sprintf@f+1,c
  2338  00029E  0E01               	movlw	1
  2339  0002A0  ECE5  F005         	call	_read_eeprom
  2340  0002A4  6E28               	movwf	??_command_exec& (0+255),c
  2341  0002A6  5028               	movf	??_command_exec,w,c
  2342  0002A8  6E1E               	movwf	?_sprintf+4,c
  2343  0002AA  6A1F               	clrf	?_sprintf+5,c
  2344  0002AC  ECB4  F001         	call	_sprintf	;wreg free
  2345                           
  2346                           ;uart.c: 167: uart1_write_string(s_buffer);
  2347  0002B0  0E29               	movlw	low command_exec@s_buffer
  2348  0002B2  6E14               	movwf	uart1_write_string@s,c
  2349  0002B4  0E00               	movlw	high command_exec@s_buffer
  2350  0002B6  6E15               	movwf	uart1_write_string@s+1,c
  2351  0002B8  EC35  F004         	call	_uart1_write_string	;wreg free
  2352                           
  2353                           ;uart.c: 168: }
  2354  0002BC  D052               	goto	l178
  2355  0002BE                     l173:
  2356                           
  2357                           ;uart.c: 169: else if (strcmp("RETT", command) == 0)
  2358  0002BE  0EFA               	movlw	low STR_22
  2359  0002C0  6E0E               	movwf	strcmp@s1,c
  2360  0002C2  0E7F               	movlw	high STR_22
  2361  0002C4  6E0F               	movwf	strcmp@s1+1,c
  2362  0002C6  0E60               	movlw	low _command
  2363  0002C8  6E10               	movwf	strcmp@s2,c
  2364  0002CA  0E00               	movlw	high _command
  2365  0002CC  6E11               	movwf	strcmp@s2+1,c
  2366  0002CE  EC98  F004         	call	_strcmp	;wreg free
  2367  0002D2  500E               	movf	?_strcmp,w,c
  2368  0002D4  100F               	iorwf	?_strcmp+1,w,c
  2369  0002D6  A4D8               	btfss	16344,2,c
  2370  0002D8  D018               	goto	l175
  2371                           
  2372                           ;uart.c: 170: {
  2373                           ;uart.c: 171: sprintf(s_buffer, "%d\r\n", read_eeprom(0x00));
  2374  0002DA  0E29               	movlw	low command_exec@s_buffer
  2375  0002DC  6E1A               	movwf	sprintf@sp,c
  2376  0002DE  0E00               	movlw	high command_exec@s_buffer
  2377  0002E0  6E1B               	movwf	sprintf@sp+1,c
  2378  0002E2  0EE6               	movlw	low STR_21
  2379  0002E4  6E1C               	movwf	sprintf@f,c
  2380  0002E6  0E7F               	movlw	high STR_21
  2381  0002E8  6E1D               	movwf	sprintf@f+1,c
  2382  0002EA  0E00               	movlw	0
  2383  0002EC  ECE5  F005         	call	_read_eeprom
  2384  0002F0  6E28               	movwf	??_command_exec& (0+255),c
  2385  0002F2  5028               	movf	??_command_exec,w,c
  2386  0002F4  6E1E               	movwf	?_sprintf+4,c
  2387  0002F6  6A1F               	clrf	?_sprintf+5,c
  2388  0002F8  ECB4  F001         	call	_sprintf	;wreg free
  2389                           
  2390                           ;uart.c: 172: uart1_write_string(s_buffer);
  2391  0002FC  0E29               	movlw	low command_exec@s_buffer
  2392  0002FE  6E14               	movwf	uart1_write_string@s,c
  2393  000300  0E00               	movlw	high command_exec@s_buffer
  2394  000302  6E15               	movwf	uart1_write_string@s+1,c
  2395  000304  EC35  F004         	call	_uart1_write_string	;wreg free
  2396                           
  2397                           ;uart.c: 173: }
  2398  000308  D02C               	goto	l178
  2399  00030A                     l175:
  2400                           
  2401                           ;uart.c: 174: else if (strcmp("REBP", command) == 0)
  2402  00030A  0EF0               	movlw	low STR_24
  2403  00030C  6E0E               	movwf	strcmp@s1,c
  2404  00030E  0E7F               	movlw	high STR_24
  2405  000310  6E0F               	movwf	strcmp@s1+1,c
  2406  000312  0E60               	movlw	low _command
  2407  000314  6E10               	movwf	strcmp@s2,c
  2408  000316  0E00               	movlw	high _command
  2409  000318  6E11               	movwf	strcmp@s2+1,c
  2410  00031A  EC98  F004         	call	_strcmp	;wreg free
  2411  00031E  500E               	movf	?_strcmp,w,c
  2412  000320  100F               	iorwf	?_strcmp+1,w,c
  2413  000322  A4D8               	btfss	16344,2,c
  2414  000324  D018               	goto	l177
  2415                           
  2416                           ;uart.c: 175: {
  2417                           ;uart.c: 176: sprintf(s_buffer, "%d\r\n", read_eeprom(0x02));
  2418  000326  0E29               	movlw	low command_exec@s_buffer
  2419  000328  6E1A               	movwf	sprintf@sp,c
  2420  00032A  0E00               	movlw	high command_exec@s_buffer
  2421  00032C  6E1B               	movwf	sprintf@sp+1,c
  2422  00032E  0EE6               	movlw	low STR_21
  2423  000330  6E1C               	movwf	sprintf@f,c
  2424  000332  0E7F               	movlw	high STR_21
  2425  000334  6E1D               	movwf	sprintf@f+1,c
  2426  000336  0E02               	movlw	2
  2427  000338  ECE5  F005         	call	_read_eeprom
  2428  00033C  6E28               	movwf	??_command_exec& (0+255),c
  2429  00033E  5028               	movf	??_command_exec,w,c
  2430  000340  6E1E               	movwf	?_sprintf+4,c
  2431  000342  6A1F               	clrf	?_sprintf+5,c
  2432  000344  ECB4  F001         	call	_sprintf	;wreg free
  2433                           
  2434                           ;uart.c: 177: uart1_write_string(s_buffer);
  2435  000348  0E29               	movlw	low command_exec@s_buffer
  2436  00034A  6E14               	movwf	uart1_write_string@s,c
  2437  00034C  0E00               	movlw	high command_exec@s_buffer
  2438  00034E  6E15               	movwf	uart1_write_string@s+1,c
  2439  000350  EC35  F004         	call	_uart1_write_string	;wreg free
  2440                           
  2441                           ;uart.c: 178: }
  2442  000354  D006               	goto	l178
  2443  000356                     l177:
  2444                           
  2445                           ;uart.c: 179: else
  2446                           ;uart.c: 180: {
  2447                           ;uart.c: 181: uart1_write_string("COMMANDS:\r\n"
  2448                           ;uart.c: 182: "LED2    - Toggle LED2\r\n"
  2449                           ;uart.c: 183: "TTxx    - Transition time, xx = a value 01 to 99 seconds.\r\n"
  2450                           ;uart.c: 184: "RTxx    - Red light time, xx = a value 01 to 99 seconds.\r\n"
  2451                           ;uart.c: 185: "BPxx    - Button press to yellow time, xx = a value 01 to 99 seconds.\r\n
      +                          "
  2452                           ;uart.c: 186: "RERT    - Read current red light time from EEPROM.\r\n"
  2453                           ;uart.c: 187: "RETT    - Read current transition time from EEPROM.\r\n"
  2454  000356  0E65               	movlw	low STR_26
  2455  000358  6E14               	movwf	uart1_write_string@s,c
  2456  00035A  0E7D               	movlw	high STR_26
  2457  00035C  6E15               	movwf	uart1_write_string@s+1,c
  2458  00035E  EC35  F004         	call	_uart1_write_string	;wreg free
  2459  000362                     l178:
  2460                           
  2461                           ;uart.c: 189: }
  2462                           ;uart.c: 191: uart_command_flag = 0;
  2463  000362  0E00               	movlw	0
  2464  000364  6E3B               	movwf	_uart_command_flag,c
  2465  000366  0012               	return		;funcret
  2466  000368                     __end_of_command_exec:
  2467                           	opt stack 0
  2468                           
  2469 ;; *************** function _write_eeprom *****************
  2470 ;; Defined at:
  2471 ;;		line 4 in file "eeprom.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  addr            1    wreg     unsigned char 
  2474 ;;  data            1   13[COMRAM] unsigned char 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  addr            1   14[COMRAM] unsigned char 
  2477 ;;  GIEValue        1   15[COMRAM] unsigned char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2487 ;;      Params:         1       0       0       0       0       0       0       0       0
  2488 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2490 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2491 ;;Total ram usage:        3 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    2
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_command_exec
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text6
  2502  000A7E                     __ptext6:
  2503                           	opt stack 0
  2504  000A7E                     _write_eeprom:
  2505                           	opt stack 27
  2506                           
  2507                           ;incstack = 0
  2508                           ;write_eeprom@addr stored from wreg
  2509  000A7E  6E0F               	movwf	write_eeprom@addr,c
  2510                           
  2511                           ;eeprom.c: 7: uint8_t GIEValue = INTCON0bits.GIE;
  2512  000A80  013F               	movlb	63	; () banked
  2513  000A82  0E00               	movlw	0
  2514  000A84  BFD2               	btfsc	210,7,b	;volatile
  2515  000A86  0E01               	movlw	1
  2516  000A88  6E10               	movwf	write_eeprom@GIEValue,c
  2517                           
  2518                           ; BSR set to: 63
  2519                           ;eeprom.c: 9: NVMADRL = (uint8_t)(addr & 0xff);
  2520  000A8A  0060  F03F  F9E0   	movff	write_eeprom@addr,14816	;volatile
  2521                           
  2522                           ; BSR set to: 63
  2523                           ;eeprom.c: 10: NVMDAT = data;
  2524  000A90  0060  F03B  F9E3   	movff	write_eeprom@data,14819	;volatile
  2525                           
  2526                           ; BSR set to: 63
  2527                           ;eeprom.c: 12: NVMCON1bits.NVMREG = 0;
  2528  000A96  0E3F               	movlw	-193
  2529  000A98  0139               	movlb	57	; () banked
  2530  000A9A  17E5               	andwf	229,f,b	;volsfr
  2531                           
  2532                           ; BSR set to: 57
  2533                           ;eeprom.c: 13: NVMCON1bits.WREN = 1;
  2534  000A9C  85E5               	bsf	229,2,b	;volsfr
  2535                           
  2536                           ; BSR set to: 57
  2537                           ;eeprom.c: 15: INTCON0bits.GIE = 0;
  2538  000A9E  013F               	movlb	63	; () banked
  2539  000AA0  9FD2               	bcf	210,7,b	;volatile
  2540                           
  2541                           ; BSR set to: 63
  2542                           ;eeprom.c: 18: NVMCON2 = 0x55;
  2543  000AA2  0E55               	movlw	85
  2544  000AA4  0139               	movlb	57	; () banked
  2545  000AA6  6FE6               	movwf	230,b	;volsfr
  2546                           
  2547                           ; BSR set to: 57
  2548                           ;eeprom.c: 19: NVMCON2 = 0xaa;
  2549  000AA8  0EAA               	movlw	170
  2550  000AAA  6FE6               	movwf	230,b	;volsfr
  2551                           
  2552                           ; BSR set to: 57
  2553                           ;eeprom.c: 20: NVMCON1bits.WR = 1;
  2554  000AAC  83E5               	bsf	229,1,b	;volsfr
  2555  000AAE                     
  2556                           ; BSR set to: 57
  2557                           
  2558                           ; BSR set to: 57
  2559  000AAE  B3E5               	btfsc	229,1,b	;volsfr
  2560  000AB0  D7FE               	goto	l273
  2561                           
  2562                           ; BSR set to: 57
  2563                           ;eeprom.c: 25: NVMCON1bits.WREN = 0;
  2564  000AB2  95E5               	bcf	229,2,b	;volsfr
  2565                           
  2566                           ;eeprom.c: 27: INTCON0bits.GIE = GIEValue;
  2567  000AB4  B010               	btfsc	write_eeprom@GIEValue,0,c
  2568  000AB6  D003               	bra	u885
  2569  000AB8  013F               	movlb	63	; () banked
  2570  000ABA  9FD2               	bcf	210,7,b	;volatile
  2571  000ABC  D002               	bra	u886
  2572  000ABE                     u885:
  2573  000ABE  013F               	movlb	63	; () banked
  2574  000AC0  8FD2               	bsf	210,7,b	;volatile
  2575  000AC2                     u886:
  2576                           
  2577                           ; BSR set to: 63
  2578  000AC2  0012               	return		;funcret
  2579  000AC4                     __end_of_write_eeprom:
  2580                           	opt stack 0
  2581                           
  2582 ;; *************** function _uart1_write_string *****************
  2583 ;; Defined at:
  2584 ;;		line 68 in file "uart.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  s               2   19[COMRAM] PTR unsigned char 
  2587 ;;		 -> STR_26(398), command_exec@s_buffer(8), STR_19(6), STR_18(21), 
  2588 ;;		 -> STR_16(6), STR_15(21), STR_13(6), STR_12(21), 
  2589 ;;		 -> STR_10(6), STR_8(41), STR_7(30), STR_6(32), 
  2590 ;;		 -> STR_5(21), STR_4(25), STR_3(47), STR_2(20), 
  2591 ;;		 -> STR_1(5), 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  i               2   23[COMRAM] int 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2603 ;;      Params:         2       0       0       0       0       0       0       0       0
  2604 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2605 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2606 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2607 ;;Total ram usage:        6 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    3
  2610 ;; This function calls:
  2611 ;;		_strlen
  2612 ;;		_uart1_write
  2613 ;; This function is called by:
  2614 ;;		_main
  2615 ;;		_command_exec
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text7
  2620  00086A                     __ptext7:
  2621                           	opt stack 0
  2622  00086A                     _uart1_write_string:
  2623                           	opt stack 27
  2624                           
  2625                           ;uart.c: 70: for(int i = 0; i < strlen(s); i++)
  2626                           
  2627                           ; BSR set to: 63
  2628                           ;incstack = 0
  2629  00086A  0E00               	movlw	0
  2630  00086C  6E19               	movwf	uart1_write_string@i+1,c
  2631  00086E  0E00               	movlw	0
  2632  000870  6E18               	movwf	uart1_write_string@i,c
  2633  000872  D01E               	goto	l146
  2634  000874                     
  2635                           ;uart.c: 71: {
  2636                           ;uart.c: 72: uart1_write(s[i]);
  2637  000874  5018               	movf	uart1_write_string@i,w,c
  2638  000876  2414               	addwf	uart1_write_string@s,w,c
  2639  000878  6E16               	movwf	??_uart1_write_string& (0+255),c
  2640  00087A  5019               	movf	uart1_write_string@i+1,w,c
  2641  00087C  2015               	addwfc	uart1_write_string@s+1,w,c
  2642  00087E  6E17               	movwf	(??_uart1_write_string+1)& (0+255),c
  2643  000880  0060  F05B  FFF6   	movff	??_uart1_write_string,16374
  2644  000886  0060  F05F  FFF7   	movff	??_uart1_write_string+1,16375
  2645  00088C  6AF8               	clrf	16376,c
  2646  00088E  0E07               	movlw	(high __ramtop+-1)
  2647  000890  64F7               	cpfsgt	16375,c
  2648  000892  D003               	bra	u777
  2649  000894  0008               	tblrd		*
  2650  000896  50F5               	movf	16373,w,c
  2651  000898  D007               	bra	u770
  2652  00089A                     u777:
  2653  00089A  006F FFDB FFE9     	movff	16374,16361
  2654  0008A0  006F FFDF FFEA     	movff	16375,16362
  2655  0008A6  50EF               	movf	16367,w,c
  2656  0008A8                     u770:
  2657  0008A8  ECFD  F005         	call	_uart1_write
  2658  0008AC  4A18               	infsnz	uart1_write_string@i,f,c
  2659  0008AE  2A19               	incf	uart1_write_string@i+1,f,c
  2660  0008B0                     l146:
  2661  0008B0  0060  F050  F00E   	movff	uart1_write_string@s,strlen@s
  2662  0008B6  0060  F054  F00F   	movff	uart1_write_string@s+1,strlen@s+1
  2663  0008BC  EC67  F004         	call	_strlen	;wreg free
  2664  0008C0  500E               	movf	?_strlen,w,c
  2665  0008C2  5C18               	subwf	uart1_write_string@i,w,c
  2666  0008C4  500F               	movf	?_strlen+1,w,c
  2667  0008C6  5819               	subwfb	uart1_write_string@i+1,w,c
  2668  0008C8  B0D8               	btfsc	16344,0,c
  2669  0008CA  0012               	return	
  2670  0008CC  D7D3               	goto	l147
  2671  0008CE                     __end_of_uart1_write_string:
  2672                           	opt stack 0
  2673                           
  2674 ;; *************** function _uart1_write *****************
  2675 ;; Defined at:
  2676 ;;		line 62 in file "uart.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  tx_data         1    wreg     unsigned char 
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;  tx_data         1   13[COMRAM] unsigned char 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  1    wreg      void 
  2683 ;; Registers used:
  2684 ;;		wreg
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2690 ;;      Params:         0       0       0       0       0       0       0       0       0
  2691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2693 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2694 ;;Total ram usage:        1 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    2
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		_uart1_write_string
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text8
  2705  000BFA                     __ptext8:
  2706                           	opt stack 0
  2707  000BFA                     _uart1_write:
  2708                           	opt stack 27
  2709                           
  2710                           ;incstack = 0
  2711                           ;uart1_write@tx_data stored from wreg
  2712  000BFA  6E0E               	movwf	uart1_write@tx_data,c
  2713  000BFC                     
  2714                           ;uart.c: 64: while(!PIR3bits.U1TXIF) {}
  2715  000BFC  0139               	movlb	57	; () banked
  2716  000BFE  A9A3               	btfss	163,4,b	;volatile
  2717  000C00  D7FD               	goto	l1490
  2718                           
  2719                           ; BSR set to: 57
  2720                           ;uart.c: 65: U1TXB = tx_data;
  2721                           
  2722                           ; BSR set to: 57
  2723  000C02  0060  F03B  FDEA   	movff	uart1_write@tx_data,15850	;volatile
  2724                           
  2725                           ; BSR set to: 57
  2726  000C08  0012               	return		;funcret
  2727  000C0A                     __end_of_uart1_write:
  2728                           	opt stack 0
  2729                           
  2730 ;; *************** function _strlen *****************
  2731 ;; Defined at:
  2732 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2735 ;;		 -> STR_26(398), command_exec@s_buffer(8), STR_19(6), STR_18(21), 
  2736 ;;		 -> STR_16(6), STR_15(21), STR_13(6), STR_12(21), 
  2737 ;;		 -> STR_10(6), STR_8(41), command(32), STR_7(30), 
  2738 ;;		 -> STR_6(32), STR_5(21), STR_4(25), STR_3(47), 
  2739 ;;		 -> STR_2(20), STR_1(5), 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  cp              2   17[COMRAM] PTR const unsigned char 
  2742 ;;		 -> STR_26(398), command_exec@s_buffer(8), STR_19(6), STR_18(21), 
  2743 ;;		 -> STR_16(6), STR_15(21), STR_13(6), STR_12(21), 
  2744 ;;		 -> STR_10(6), STR_8(41), command(32), STR_7(30), 
  2745 ;;		 -> STR_6(32), STR_5(21), STR_4(25), STR_3(47), 
  2746 ;;		 -> STR_2(20), STR_1(5), 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  2   13[COMRAM] unsigned int 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2756 ;;      Params:         2       0       0       0       0       0       0       0       0
  2757 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2758 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2759 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2760 ;;Total ram usage:        6 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    2
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_uart1_write_string
  2767 ;;		_command_exec
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text9
  2772  0008CE                     __ptext9:
  2773                           	opt stack 0
  2774  0008CE                     _strlen:
  2775                           	opt stack 27
  2776                           
  2777                           ; BSR set to: 57
  2778                           ;incstack = 0
  2779  0008CE  0060  F038  F012   	movff	strlen@s,strlen@cp
  2780  0008D4  0060  F03C  F013   	movff	strlen@s+1,strlen@cp+1
  2781  0008DA  D002               	goto	l888
  2782  0008DC  4A12               	infsnz	strlen@cp,f,c
  2783  0008DE  2A13               	incf	strlen@cp+1,f,c
  2784  0008E0                     l888:
  2785  0008E0  0060  F04B  FFF6   	movff	strlen@cp,16374
  2786  0008E6  0060  F04F  FFF7   	movff	strlen@cp+1,16375
  2787  0008EC  6AF8               	clrf	16376,c
  2788  0008EE  0E07               	movlw	(high __ramtop+-1)
  2789  0008F0  64F7               	cpfsgt	16375,c
  2790  0008F2  D003               	bra	u677
  2791  0008F4  0008               	tblrd		*
  2792  0008F6  50F5               	movf	16373,w,c
  2793  0008F8  D007               	bra	u670
  2794  0008FA                     u677:
  2795  0008FA  006F FFDB FFE9     	movff	16374,16361
  2796  000900  006F FFDF FFEA     	movff	16375,16362
  2797  000906  50EF               	movf	16367,w,c
  2798  000908                     u670:
  2799  000908  0900               	iorlw	0
  2800  00090A  A4D8               	btfss	16344,2,c
  2801  00090C  D7E7               	goto	l889
  2802  00090E  0060  F038  F010   	movff	strlen@s,??_strlen
  2803  000914  0060  F03C  F011   	movff	strlen@s+1,??_strlen+1
  2804  00091A  1E10               	comf	??_strlen,f,c
  2805  00091C  1E11               	comf	??_strlen+1,f,c
  2806  00091E  4A10               	infsnz	??_strlen,f,c
  2807  000920  2A11               	incf	??_strlen+1,f,c
  2808  000922  5012               	movf	strlen@cp,w,c
  2809  000924  2410               	addwf	??_strlen,w,c
  2810  000926  6E0E               	movwf	?_strlen,c
  2811  000928  5013               	movf	strlen@cp+1,w,c
  2812  00092A  2011               	addwfc	??_strlen+1,w,c
  2813  00092C  6E0F               	movwf	?_strlen+1,c
  2814  00092E  0012               	return	
  2815  000930                     __end_of_strlen:
  2816                           	opt stack 0
  2817                           
  2818 ;; *************** function _strcmp *****************
  2819 ;; Defined at:
  2820 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  s1              2   13[COMRAM] PTR const unsigned char 
  2823 ;;		 -> STR_24(5), STR_22(5), STR_20(5), STR_17(3), 
  2824 ;;		 -> STR_14(3), STR_11(3), STR_9(5), 
  2825 ;;  s2              2   15[COMRAM] PTR const unsigned char 
  2826 ;;		 -> command_exec@c_cmd(3), command(32), 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  r               1   18[COMRAM] char 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  2   13[COMRAM] int 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2838 ;;      Params:         4       0       0       0       0       0       0       0       0
  2839 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2840 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        6 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    2
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_command_exec
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text10
  2853  000930                     __ptext10:
  2854                           	opt stack 0
  2855  000930                     _strcmp:
  2856                           	opt stack 27
  2857                           
  2858                           ;incstack = 0
  2859  000930  D004               	goto	l880
  2860  000932  4A0E               	infsnz	strcmp@s1,f,c
  2861  000934  2A0F               	incf	strcmp@s1+1,f,c
  2862  000936  4A10               	infsnz	strcmp@s2,f,c
  2863  000938  2A11               	incf	strcmp@s2+1,f,c
  2864  00093A                     l880:
  2865  00093A  0060  F03B  FFF6   	movff	strcmp@s1,16374
  2866  000940  0060  F03F  FFF7   	movff	strcmp@s1+1,16375
  2867  000946                     	if	0	;tblptru may be non-zero
  2868  000946                     	endif
  2869  000946                     	if	0	;tblptru may be non-zero
  2870  000946                     	endif
  2871  000946  0008               	tblrd		*
  2872  000948  006F FFD4  F012    	movff	16373,??_strcmp
  2873  00094E  0060  F043  FFD9   	movff	strcmp@s2,16345
  2874  000954  0060  F047  FFDA   	movff	strcmp@s2+1,16346
  2875  00095A  50DF               	movf	16351,w,c
  2876  00095C  0800               	sublw	0
  2877  00095E  2412               	addwf	??_strcmp,w,c
  2878  000960  6E13               	movwf	strcmp@r,c
  2879  000962  5013               	movf	strcmp@r,w,c
  2880  000964  A4D8               	btfss	16344,2,c
  2881  000966  D00B               	goto	u800
  2882  000968  0060  F03B  FFF6   	movff	strcmp@s1,16374
  2883  00096E  0060  F03F  FFF7   	movff	strcmp@s1+1,16375
  2884  000974                     	if	0	;tblptru may be non-zero
  2885  000974                     	endif
  2886  000974                     	if	0	;tblptru may be non-zero
  2887  000974                     	endif
  2888  000974  0008               	tblrd		*
  2889  000976  50F5               	movf	16373,w,c
  2890  000978  0900               	iorlw	0
  2891  00097A  A4D8               	btfss	16344,2,c
  2892  00097C  D7DA               	goto	l881
  2893  00097E                     u800:
  2894  00097E  5013               	movf	strcmp@r,w,c
  2895  000980  6E0E               	movwf	?_strcmp,c
  2896  000982  6A0F               	clrf	?_strcmp+1,c
  2897  000984  BE0E               	btfsc	?_strcmp,7,c
  2898  000986  060F               	decf	?_strcmp+1,f,c
  2899  000988  0012               	return	
  2900  00098A                     __end_of_strcmp:
  2901                           	opt stack 0
  2902                           
  2903 ;; *************** function _sprintf *****************
  2904 ;; Defined at:
  2905 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  sp              2   25[COMRAM] PTR unsigned char 
  2908 ;;		 -> command_exec@s_buffer(8), 
  2909 ;;  f               2   27[COMRAM] PTR const unsigned char 
  2910 ;;		 -> STR_25(5), STR_23(5), STR_21(5), 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  tmpval          4    0        struct .
  2913 ;;  cp              3    0        PTR const unsigned char 
  2914 ;;  val             2   36[COMRAM] unsigned int 
  2915 ;;  ap              2   32[COMRAM] PTR void [1]
  2916 ;;		 -> ?_sprintf(2), 
  2917 ;;  len             2    0        unsigned int 
  2918 ;;  c               1   38[COMRAM] char 
  2919 ;;  prec            1   35[COMRAM] char 
  2920 ;;  flag            1   34[COMRAM] unsigned char 
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  2   25[COMRAM] int 
  2923 ;; Registers used:
  2924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2930 ;;      Params:         6       0       0       0       0       0       0       0       0
  2931 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2932 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2933 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2934 ;;Total ram usage:       14 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    3
  2937 ;; This function calls:
  2938 ;;		___lwdiv
  2939 ;;		___lwmod
  2940 ;; This function is called by:
  2941 ;;		_command_exec
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text11
  2946  000368                     __ptext11:
  2947                           	opt stack 0
  2948  000368                     _sprintf:
  2949                           	opt stack 26
  2950                           
  2951                           ;doprnt.c: 494: va_list ap;
  2952                           ;doprnt.c: 499: signed char c;
  2953                           ;doprnt.c: 506: signed char prec;
  2954                           ;doprnt.c: 508: unsigned char flag;
  2955                           ;doprnt.c: 523: union {
  2956                           ;doprnt.c: 524: unsigned long vd;
  2957                           ;doprnt.c: 525: double integ;
  2958                           ;doprnt.c: 526: } tmpval;
  2959                           ;doprnt.c: 528: unsigned int val;
  2960                           ;doprnt.c: 529: unsigned len;
  2961                           ;doprnt.c: 530: const char * cp;
  2962                           ;doprnt.c: 533: *ap = __va_start();
  2963                           
  2964                           ;incstack = 0
  2965  000368  0E1E               	movlw	low (?_sprintf+4)
  2966  00036A  6E21               	movwf	sprintf@ap,c
  2967  00036C  0E00               	movlw	high (?_sprintf+4)
  2968  00036E  6E22               	movwf	sprintf@ap+1,c
  2969                           
  2970                           ;doprnt.c: 536: while(c = *f++) {
  2971  000370  D0A3               	goto	u950
  2972  000372                     
  2973                           ;doprnt.c: 538: if(c != '%')
  2974  000372  0E25               	movlw	37
  2975  000374  1827               	xorwf	sprintf@c,w,c
  2976  000376  B4D8               	btfsc	16344,2,c
  2977  000378  D00C               	goto	l289
  2978                           
  2979                           ;doprnt.c: 540: {
  2980                           ;doprnt.c: 541: ((*sp++ = (c)));
  2981  00037A  0060  F06B  FFD9   	movff	sprintf@sp,16345
  2982  000380  0060  F06F  FFDA   	movff	sprintf@sp+1,16346
  2983  000386  0060  F09F  FFDF   	movff	sprintf@c,16351
  2984  00038C  4A1A               	infsnz	sprintf@sp,f,c
  2985  00038E  2A1B               	incf	sprintf@sp+1,f,c
  2986                           
  2987                           ;doprnt.c: 542: continue;
  2988  000390  D093               	goto	u950
  2989  000392                     l289:
  2990                           
  2991                           ;doprnt.c: 543: }
  2992                           ;doprnt.c: 548: flag = 0;
  2993  000392  0E00               	movlw	0
  2994  000394  6E23               	movwf	sprintf@flag,c
  2995                           
  2996                           ;doprnt.c: 822: }
  2997                           
  2998                           ;doprnt.c: 813: continue;
  2999                           
  3000                           ;doprnt.c: 802: default:
  3001                           
  3002                           ;doprnt.c: 698: case 'i':
  3003                           ;doprnt.c: 699: break;
  3004                           
  3005                           ;doprnt.c: 697: case 'd':
  3006                           
  3007                           ;doprnt.c: 638: goto alldone;
  3008                           
  3009                           ;doprnt.c: 637: case 0:
  3010                           
  3011                           ;doprnt.c: 635: switch(c = *f++) {
  3012  000396  0060  F073  FFF6   	movff	sprintf@f,16374
  3013  00039C  0060  F077  FFF7   	movff	sprintf@f+1,16375
  3014  0003A2  4A1C               	infsnz	sprintf@f,f,c
  3015  0003A4  2A1D               	incf	sprintf@f+1,f,c
  3016  0003A6                     	if	0	;tblptru may be non-zero
  3017  0003A6                     	endif
  3018  0003A6                     	if	0	;tblptru may be non-zero
  3019  0003A6                     	endif
  3020  0003A6  0008               	tblrd		*
  3021  0003A8  006F FFD4  F027    	movff	16373,sprintf@c
  3022  0003AE  5027               	movf	sprintf@c,w,c
  3023                           
  3024                           ; Switch size 1, requested type "space"
  3025                           ; Number of cases is 3, Range of values is 0 to 105
  3026                           ; switch strategies available:
  3027                           ; Name         Instructions Cycles
  3028                           ; simple_byte           10     6 (average)
  3029                           ;	Chosen strategy is simple_byte
  3030  0003B0  0A00               	xorlw	0	; case 0
  3031  0003B2  B4D8               	btfsc	16344,2,c
  3032  0003B4  D090               	goto	u960
  3033  0003B6  0A64               	xorlw	100	; case 100
  3034  0003B8  B4D8               	btfsc	16344,2,c
  3035  0003BA  D003               	goto	l295
  3036  0003BC  0A0D               	xorlw	13	; case 105
  3037  0003BE  A4D8               	btfss	16344,2,c
  3038  0003C0  D07B               	goto	u950
  3039  0003C2                     l295:
  3040                           
  3041                           ;doprnt.c: 1253: {
  3042                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3043  0003C2  0060  F087  FFD9   	movff	sprintf@ap,16345
  3044  0003C8  0060  F08B  FFDA   	movff	sprintf@ap+1,16346
  3045  0003CE  006F FF78  F025    	movff	16350,sprintf@val
  3046  0003D4  006F FF74  F026    	movff	16349,sprintf@val+1
  3047  0003DA  0E02               	movlw	2
  3048  0003DC  2621               	addwf	sprintf@ap,f,c
  3049  0003DE  0E00               	movlw	0
  3050  0003E0  2222               	addwfc	sprintf@ap+1,f,c
  3051                           
  3052                           ;doprnt.c: 1261: if((int)val < 0) {
  3053  0003E2  AE26               	btfss	sprintf@val+1,7,c
  3054  0003E4  D006               	goto	l297
  3055                           
  3056                           ;doprnt.c: 1262: flag |= 0x03;
  3057  0003E6  0E03               	movlw	3
  3058  0003E8  1223               	iorwf	sprintf@flag,f,c
  3059                           
  3060                           ;doprnt.c: 1263: val = -val;
  3061  0003EA  6C25               	negf	sprintf@val,c
  3062  0003EC  1E26               	comf	sprintf@val+1,f,c
  3063  0003EE  B0D8               	btfsc	16344,0,c
  3064  0003F0  2A26               	incf	sprintf@val+1,f,c
  3065  0003F2                     l297:
  3066                           
  3067                           ;doprnt.c: 1264: }
  3068                           ;doprnt.c: 1266: }
  3069                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3070  0003F2  0E01               	movlw	1
  3071  0003F4  6E27               	movwf	sprintf@c,c
  3072  0003F6                     l1666:
  3073  0003F6  0E05               	movlw	5
  3074  0003F8  1827               	xorwf	sprintf@c,w,c
  3075  0003FA  B4D8               	btfsc	16344,2,c
  3076  0003FC  D012               	goto	u930
  3077                           
  3078                           ;doprnt.c: 1306: if(val < dpowers[c])
  3079  0003FE  5027               	movf	sprintf@c,w,c
  3080  000400  0D02               	mullw	2
  3081  000402  0E5B               	movlw	low _dpowers
  3082  000404  24F3               	addwf	16371,w,c
  3083  000406  6EF6               	movwf	16374,c
  3084  000408  0E7D               	movlw	high _dpowers
  3085  00040A  20F4               	addwfc	16372,w,c
  3086  00040C  6EF7               	movwf	16375,c
  3087  00040E                     	if	0	;There are less than 3 active tblptr bytes
  3088  00040E                     	endif
  3089  00040E  0009               	tblrd		*+
  3090  000410  50F5               	movf	16373,w,c
  3091  000412  5C25               	subwf	sprintf@val,w,c
  3092  000414  0009               	tblrd		*+
  3093  000416  50F5               	movf	16373,w,c
  3094  000418  5826               	subwfb	sprintf@val+1,w,c
  3095  00041A  A0D8               	btfss	16344,0,c
  3096  00041C  D002               	goto	u930
  3097                           
  3098                           ;doprnt.c: 1307: break;
  3099  00041E  2A27               	incf	sprintf@c,f,c
  3100  000420  D7EA               	goto	l1666
  3101  000422                     u930:
  3102                           
  3103                           ;doprnt.c: 1422: {
  3104                           ;doprnt.c: 1438: if(flag & 0x03)
  3105  000422  0060  F08C  F020   	movff	sprintf@flag,??_sprintf
  3106  000428  0E03               	movlw	3
  3107  00042A  1620               	andwf	??_sprintf,f,c
  3108  00042C  B4D8               	btfsc	16344,2,c
  3109  00042E  D00A               	goto	l301
  3110                           
  3111                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3112  000430  0060  F06B  FFD9   	movff	sprintf@sp,16345
  3113  000436  0060  F06F  FFDA   	movff	sprintf@sp+1,16346
  3114  00043C  0E2D               	movlw	45
  3115  00043E  6EDF               	movwf	16351,c
  3116  000440  4A1A               	infsnz	sprintf@sp,f,c
  3117  000442  2A1B               	incf	sprintf@sp+1,f,c
  3118  000444                     l301:
  3119                           
  3120                           ;doprnt.c: 1469: }
  3121                           ;doprnt.c: 1472: prec = c;
  3122  000444  0060  F09C  F024   	movff	sprintf@c,sprintf@prec
  3123                           
  3124                           ;doprnt.c: 1474: while(prec--) {
  3125  00044A  D032               	goto	l302
  3126  00044C                     
  3127                           ;doprnt.c: 1478: {
  3128                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3129  00044C  5024               	movf	sprintf@prec,w,c
  3130  00044E  0D02               	mullw	2
  3131  000450  0E5B               	movlw	low _dpowers
  3132  000452  24F3               	addwf	16371,w,c
  3133  000454  6EF6               	movwf	16374,c
  3134  000456  0E7D               	movlw	high _dpowers
  3135  000458  20F4               	addwfc	16372,w,c
  3136  00045A  6EF7               	movwf	16375,c
  3137  00045C                     	if	0	;There are less than 3 active tblptr bytes
  3138  00045C                     	endif
  3139  00045C  0009               	tblrd		*+
  3140  00045E  006F FFD4  F010    	movff	16373,___lwdiv@divisor
  3141  000464  000A               	tblrd		*-
  3142  000466  006F FFD4  F011    	movff	16373,___lwdiv@divisor+1
  3143  00046C  0060  F094  F00E   	movff	sprintf@val,___lwdiv@dividend
  3144  000472  0060  F098  F00F   	movff	sprintf@val+1,___lwdiv@dividend+1
  3145  000478  ECC5  F004         	call	___lwdiv	;wreg free
  3146  00047C  0060  F038  F015   	movff	?___lwdiv,___lwmod@dividend
  3147  000482  0060  F03C  F016   	movff	?___lwdiv+1,___lwmod@dividend+1
  3148  000488  0E00               	movlw	0
  3149  00048A  6E18               	movwf	___lwmod@divisor+1,c
  3150  00048C  0E0A               	movlw	10
  3151  00048E  6E17               	movwf	___lwmod@divisor,c
  3152  000490  EC62  F005         	call	___lwmod	;wreg free
  3153  000494  5015               	movf	?___lwmod,w,c
  3154  000496  0F30               	addlw	48
  3155  000498  6E27               	movwf	sprintf@c,c
  3156                           
  3157                           ;doprnt.c: 1523: }
  3158                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3159  00049A  0060  F06B  FFD9   	movff	sprintf@sp,16345
  3160  0004A0  0060  F06F  FFDA   	movff	sprintf@sp+1,16346
  3161  0004A6  0060  F09F  FFDF   	movff	sprintf@c,16351
  3162  0004AC  4A1A               	infsnz	sprintf@sp,f,c
  3163  0004AE  2A1B               	incf	sprintf@sp+1,f,c
  3164  0004B0                     l302:
  3165  0004B0  0624               	decf	sprintf@prec,f,c
  3166  0004B2  2824               	incf	sprintf@prec,w,c
  3167  0004B4  A4D8               	btfss	16344,2,c
  3168  0004B6  D7CA               	goto	l303
  3169  0004B8                     u950:
  3170  0004B8  0060  F073  FFF6   	movff	sprintf@f,16374
  3171  0004BE  0060  F077  FFF7   	movff	sprintf@f+1,16375
  3172  0004C4  4A1C               	infsnz	sprintf@f,f,c
  3173  0004C6  2A1D               	incf	sprintf@f+1,f,c
  3174  0004C8                     	if	0	;tblptru may be non-zero
  3175  0004C8                     	endif
  3176  0004C8                     	if	0	;tblptru may be non-zero
  3177  0004C8                     	endif
  3178  0004C8  0008               	tblrd		*
  3179  0004CA  006F FFD4  F027    	movff	16373,sprintf@c
  3180  0004D0  5027               	movf	sprintf@c,w,c
  3181  0004D2  A4D8               	btfss	16344,2,c
  3182  0004D4  D74E               	goto	l288
  3183  0004D6                     u960:
  3184                           
  3185                           ;doprnt.c: 1538: *sp = 0;
  3186                           
  3187                           ;doprnt.c: 1525: }
  3188                           ;doprnt.c: 1533: }
  3189                           ;doprnt.c: 1535: alldone:
  3190  0004D6  0060  F06B  FFD9   	movff	sprintf@sp,16345
  3191  0004DC  0060  F06F  FFDA   	movff	sprintf@sp+1,16346
  3192  0004E2  0E00               	movlw	0
  3193  0004E4  6EDF               	movwf	16351,c
  3194  0004E6  0012               	return	
  3195  0004E8                     __end_of_sprintf:
  3196                           	opt stack 0
  3197                           
  3198 ;; *************** function ___lwmod *****************
  3199 ;; Defined at:
  3200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  dividend        2   20[COMRAM] unsigned int 
  3203 ;;  divisor         2   22[COMRAM] unsigned int 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  counter         1   24[COMRAM] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  2   20[COMRAM] unsigned int 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3215 ;;      Params:         4       0       0       0       0       0       0       0       0
  3216 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3218 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3219 ;;Total ram usage:        5 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    2
  3222 ;; This function calls:
  3223 ;;		Nothing
  3224 ;; This function is called by:
  3225 ;;		_sprintf
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text12
  3230  000AC4                     __ptext12:
  3231                           	opt stack 0
  3232  000AC4                     ___lwmod:
  3233                           	opt stack 26
  3234                           
  3235                           ;incstack = 0
  3236  000AC4  5017               	movf	___lwmod@divisor,w,c
  3237  000AC6  1018               	iorwf	___lwmod@divisor+1,w,c
  3238  000AC8  B4D8               	btfsc	16344,2,c
  3239  000ACA  D018               	goto	l745
  3240  000ACC  0E01               	movlw	1
  3241  000ACE  6E19               	movwf	___lwmod@counter,c
  3242  000AD0  D004               	goto	l740
  3243  000AD2  90D8               	bcf	16344,0,c
  3244  000AD4  3617               	rlcf	___lwmod@divisor,f,c
  3245  000AD6  3618               	rlcf	___lwmod@divisor+1,f,c
  3246  000AD8  2A19               	incf	___lwmod@counter,f,c
  3247  000ADA                     l740:
  3248  000ADA  AE18               	btfss	___lwmod@divisor+1,7,c
  3249  000ADC  D7FA               	goto	l741
  3250  000ADE                     u750:
  3251  000ADE  5017               	movf	___lwmod@divisor,w,c
  3252  000AE0  5C15               	subwf	___lwmod@dividend,w,c
  3253  000AE2  5018               	movf	___lwmod@divisor+1,w,c
  3254  000AE4  5816               	subwfb	___lwmod@dividend+1,w,c
  3255  000AE6  A0D8               	btfss	16344,0,c
  3256  000AE8  D004               	goto	l744
  3257  000AEA  5017               	movf	___lwmod@divisor,w,c
  3258  000AEC  5E15               	subwf	___lwmod@dividend,f,c
  3259  000AEE  5018               	movf	___lwmod@divisor+1,w,c
  3260  000AF0  5A16               	subwfb	___lwmod@dividend+1,f,c
  3261  000AF2                     l744:
  3262  000AF2  90D8               	bcf	16344,0,c
  3263  000AF4  3218               	rrcf	___lwmod@divisor+1,f,c
  3264  000AF6  3217               	rrcf	___lwmod@divisor,f,c
  3265  000AF8  2E19               	decfsz	___lwmod@counter,f,c
  3266  000AFA  D7F1               	goto	u750
  3267  000AFC                     l745:
  3268  000AFC  0060  F054  F015   	movff	___lwmod@dividend,?___lwmod
  3269  000B02  0060  F058  F016   	movff	___lwmod@dividend+1,?___lwmod+1
  3270  000B08  0012               	return		;funcret
  3271  000B0A                     __end_of___lwmod:
  3272                           	opt stack 0
  3273                           
  3274 ;; *************** function ___lwdiv *****************
  3275 ;; Defined at:
  3276 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  dividend        2   13[COMRAM] unsigned int 
  3279 ;;  divisor         2   15[COMRAM] unsigned int 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  quotient        2   17[COMRAM] unsigned int 
  3282 ;;  counter         1   19[COMRAM] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  2   13[COMRAM] unsigned int 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3292 ;;      Params:         4       0       0       0       0       0       0       0       0
  3293 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3295 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3296 ;;Total ram usage:        7 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    2
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_sprintf
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text13
  3307  00098A                     __ptext13:
  3308                           	opt stack 0
  3309  00098A                     ___lwdiv:
  3310                           	opt stack 26
  3311                           
  3312                           ;incstack = 0
  3313  00098A  0E00               	movlw	0
  3314  00098C  6E13               	movwf	___lwdiv@quotient+1,c
  3315  00098E  0E00               	movlw	0
  3316  000990  6E12               	movwf	___lwdiv@quotient,c
  3317  000992  5010               	movf	___lwdiv@divisor,w,c
  3318  000994  1011               	iorwf	___lwdiv@divisor+1,w,c
  3319  000996  B4D8               	btfsc	16344,2,c
  3320  000998  D01C               	goto	l735
  3321  00099A  0E01               	movlw	1
  3322  00099C  6E14               	movwf	___lwdiv@counter,c
  3323  00099E  D004               	goto	l730
  3324  0009A0  90D8               	bcf	16344,0,c
  3325  0009A2  3610               	rlcf	___lwdiv@divisor,f,c
  3326  0009A4  3611               	rlcf	___lwdiv@divisor+1,f,c
  3327  0009A6  2A14               	incf	___lwdiv@counter,f,c
  3328  0009A8                     l730:
  3329  0009A8  AE11               	btfss	___lwdiv@divisor+1,7,c
  3330  0009AA  D7FA               	goto	l731
  3331  0009AC                     u720:
  3332  0009AC  90D8               	bcf	16344,0,c
  3333  0009AE  3612               	rlcf	___lwdiv@quotient,f,c
  3334  0009B0  3613               	rlcf	___lwdiv@quotient+1,f,c
  3335  0009B2  5010               	movf	___lwdiv@divisor,w,c
  3336  0009B4  5C0E               	subwf	___lwdiv@dividend,w,c
  3337  0009B6  5011               	movf	___lwdiv@divisor+1,w,c
  3338  0009B8  580F               	subwfb	___lwdiv@dividend+1,w,c
  3339  0009BA  A0D8               	btfss	16344,0,c
  3340  0009BC  D005               	goto	l734
  3341  0009BE  5010               	movf	___lwdiv@divisor,w,c
  3342  0009C0  5E0E               	subwf	___lwdiv@dividend,f,c
  3343  0009C2  5011               	movf	___lwdiv@divisor+1,w,c
  3344  0009C4  5A0F               	subwfb	___lwdiv@dividend+1,f,c
  3345  0009C6  8012               	bsf	___lwdiv@quotient,0,c
  3346  0009C8                     l734:
  3347  0009C8  90D8               	bcf	16344,0,c
  3348  0009CA  3211               	rrcf	___lwdiv@divisor+1,f,c
  3349  0009CC  3210               	rrcf	___lwdiv@divisor,f,c
  3350  0009CE  2E14               	decfsz	___lwdiv@counter,f,c
  3351  0009D0  D7ED               	goto	u720
  3352  0009D2                     l735:
  3353  0009D2  0060  F048  F00E   	movff	___lwdiv@quotient,?___lwdiv
  3354  0009D8  0060  F04C  F00F   	movff	___lwdiv@quotient+1,?___lwdiv+1
  3355  0009DE  0012               	return		;funcret
  3356  0009E0                     __end_of___lwdiv:
  3357                           	opt stack 0
  3358                           
  3359 ;; *************** function _read_eeprom *****************
  3360 ;; Defined at:
  3361 ;;		line 30 in file "eeprom.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  addr            1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  addr            1   13[COMRAM] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      unsigned char 
  3368 ;; Registers used:
  3369 ;;		wreg, status,2
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3375 ;;      Params:         0       0       0       0       0       0       0       0       0
  3376 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3378 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3379 ;;Total ram usage:        1 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    2
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_command_exec
  3386 ;;		_traffic_lights_init
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text14
  3391  000BCA                     __ptext14:
  3392                           	opt stack 0
  3393  000BCA                     _read_eeprom:
  3394                           	opt stack 27
  3395                           
  3396                           ;incstack = 0
  3397                           ;read_eeprom@addr stored from wreg
  3398  000BCA  6E0E               	movwf	read_eeprom@addr,c
  3399                           
  3400                           ;eeprom.c: 32: NVMADRL = (uint8_t)(addr & 0xff);
  3401  000BCC  0060  F03B  F9E0   	movff	read_eeprom@addr,14816	;volatile
  3402                           
  3403                           ;eeprom.c: 33: NVMCON1bits.NVMREG = 0;
  3404  000BD2  0E3F               	movlw	-193
  3405  000BD4  0139               	movlb	57	; () banked
  3406  000BD6  17E5               	andwf	229,f,b	;volsfr
  3407                           
  3408                           ; BSR set to: 57
  3409                           ;eeprom.c: 34: NVMCON1bits.RD = 1;
  3410  000BD8  81E5               	bsf	229,0,b	;volsfr
  3411                           
  3412                           ; BSR set to: 57
  3413                           ;eeprom.c: 35: __nop();
  3414  000BDA  F000               	nop	
  3415                           
  3416                           ;eeprom.c: 36: __nop();
  3417  000BDC  F000               	nop	
  3418                           
  3419                           ;eeprom.c: 38: return ((uint8_t)NVMDAT);
  3420  000BDE  0139               	movlb	57	; () banked
  3421  000BE0  51E3               	movf	227,w,b	;volatile
  3422  000BE2  0012               	return	
  3423  000BE4                     __end_of_read_eeprom:
  3424                           	opt stack 0
  3425                           
  3426 ;; *************** function _atoi *****************
  3427 ;; Defined at:
  3428 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  s               2   19[COMRAM] PTR const unsigned char 
  3431 ;;		 -> command_exec@c_param(3), 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  a               2   24[COMRAM] int 
  3434 ;;  sign            1   23[COMRAM] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  2   19[COMRAM] int 
  3437 ;; Registers used:
  3438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3444 ;;      Params:         2       0       0       0       0       0       0       0       0
  3445 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3446 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3447 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3448 ;;Total ram usage:        7 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    3
  3451 ;; This function calls:
  3452 ;;		___wmul
  3453 ;;		_isdigit
  3454 ;; This function is called by:
  3455 ;;		_command_exec
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text15
  3460  0004E8                     __ptext15:
  3461                           	opt stack 0
  3462  0004E8                     _atoi:
  3463                           	opt stack 26
  3464                           
  3465                           ; BSR set to: 57
  3466                           ;incstack = 0
  3467  0004E8  D002               	goto	l470
  3468  0004EA  4A14               	infsnz	atoi@s,f,c
  3469  0004EC  2A15               	incf	atoi@s+1,f,c
  3470  0004EE                     l470:
  3471  0004EE  0060  F053  FFD9   	movff	atoi@s,16345
  3472  0004F4  0060  F057  FFDA   	movff	atoi@s+1,16346
  3473  0004FA  0E20               	movlw	32
  3474  0004FC  18DE               	xorwf	16350,w,c
  3475  0004FE  B4D8               	btfsc	16344,2,c
  3476  000500  D7F4               	goto	l471
  3477  000502  0060  F053  FFD9   	movff	atoi@s,16345
  3478  000508  0060  F057  FFDA   	movff	atoi@s+1,16346
  3479  00050E  0E09               	movlw	9
  3480  000510  18DE               	xorwf	16350,w,c
  3481  000512  B4D8               	btfsc	16344,2,c
  3482  000514  D7EA               	goto	l471
  3483  000516  0E00               	movlw	0
  3484  000518  6E1A               	movwf	atoi@a+1,c
  3485  00051A  0E00               	movlw	0
  3486  00051C  6E19               	movwf	atoi@a,c
  3487  00051E  0E00               	movlw	0
  3488  000520  6E18               	movwf	atoi@sign,c
  3489  000522  0060  F053  FFD9   	movff	atoi@s,16345
  3490  000528  0060  F057  FFDA   	movff	atoi@s+1,16346
  3491  00052E  0E2D               	movlw	45
  3492  000530  18DE               	xorwf	16350,w,c
  3493  000532  A4D8               	btfss	16344,2,c
  3494  000534  D002               	goto	l473
  3495  000536  2A18               	incf	atoi@sign,f,c
  3496  000538  D02A               	goto	l1600
  3497  00053A                     l473:
  3498  00053A  0060  F053  FFD9   	movff	atoi@s,16345
  3499  000540  0060  F057  FFDA   	movff	atoi@s+1,16346
  3500  000546  0E2B               	movlw	43
  3501  000548  18DE               	xorwf	16350,w,c
  3502  00054A  A4D8               	btfss	16344,2,c
  3503  00054C  D022               	goto	l476
  3504  00054E  D01F               	goto	l1600
  3505  000550  0060  F064  F00E   	movff	atoi@a,___wmul@multiplier
  3506  000556  0060  F068  F00F   	movff	atoi@a+1,___wmul@multiplier+1
  3507  00055C  0E00               	movlw	0
  3508  00055E  6E11               	movwf	___wmul@multiplicand+1,c
  3509  000560  0E0A               	movlw	10
  3510  000562  6E10               	movwf	___wmul@multiplicand,c
  3511  000564  ECBE  F005         	call	___wmul	;wreg free
  3512  000568  0060  F053  FFD9   	movff	atoi@s,16345
  3513  00056E  0060  F057  FFDA   	movff	atoi@s+1,16346
  3514  000574  50DF               	movf	16351,w,c
  3515  000576  6E16               	movwf	??_atoi& (0+255),c
  3516  000578  6A17               	clrf	(??_atoi+1)& (0+255),c
  3517  00057A  500E               	movf	?___wmul,w,c
  3518  00057C  2616               	addwf	??_atoi,f,c
  3519  00057E  500F               	movf	?___wmul+1,w,c
  3520  000580  2217               	addwfc	??_atoi+1,f,c
  3521  000582  0ED0               	movlw	208
  3522  000584  2416               	addwf	??_atoi,w,c
  3523  000586  6E19               	movwf	atoi@a,c
  3524  000588  0EFF               	movlw	255
  3525  00058A  2017               	addwfc	??_atoi+1,w,c
  3526  00058C  6E1A               	movwf	atoi@a+1,c
  3527  00058E                     l1600:
  3528  00058E  4A14               	infsnz	atoi@s,f,c
  3529  000590  2A15               	incf	atoi@s+1,f,c
  3530  000592                     l476:
  3531  000592  0060  F053  FFD9   	movff	atoi@s,16345
  3532  000598  0060  F057  FFDA   	movff	atoi@s+1,16346
  3533  00059E  50DF               	movf	16351,w,c
  3534  0005A0  ECD5  F005         	call	_isdigit
  3535  0005A4  B0D8               	btfsc	16344,0,c
  3536  0005A6  D7D4               	goto	l477
  3537  0005A8  5018               	movf	atoi@sign,w,c
  3538  0005AA  B4D8               	btfsc	16344,2,c
  3539  0005AC  D011               	goto	l479
  3540  0005AE  0060  F064  F016   	movff	atoi@a,??_atoi
  3541  0005B4  0060  F068  F017   	movff	atoi@a+1,??_atoi+1
  3542  0005BA  1E16               	comf	??_atoi,f,c
  3543  0005BC  1E17               	comf	??_atoi+1,f,c
  3544  0005BE  4A16               	infsnz	??_atoi,f,c
  3545  0005C0  2A17               	incf	??_atoi+1,f,c
  3546  0005C2  0060  F058  F014   	movff	??_atoi,?_atoi
  3547  0005C8  0060  F05C  F015   	movff	??_atoi+1,?_atoi+1
  3548  0005CE  0012               	return	
  3549  0005D0                     l479:
  3550  0005D0  0060  F064  F014   	movff	atoi@a,?_atoi
  3551  0005D6  0060  F068  F015   	movff	atoi@a+1,?_atoi+1
  3552  0005DC  0012               	return		;funcret
  3553  0005DE                     __end_of_atoi:
  3554                           	opt stack 0
  3555                           
  3556 ;; *************** function _isdigit *****************
  3557 ;; Defined at:
  3558 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  c               1    wreg     unsigned char 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  c               1   15[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3572 ;;      Params:         0       0       0       0       0       0       0       0       0
  3573 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3574 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3575 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3576 ;;Total ram usage:        3 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    2
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_atoi
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text16
  3587  000BAA                     __ptext16:
  3588                           	opt stack 0
  3589  000BAA                     _isdigit:
  3590                           	opt stack 26
  3591                           
  3592                           ;incstack = 0
  3593                           ;isdigit@c stored from wreg
  3594  000BAA  6E10               	movwf	isdigit@c,c
  3595  000BAC  0E00               	movlw	0
  3596  000BAE  6E0F               	movwf	_isdigit$1204,c
  3597  000BB0  0E3A               	movlw	58
  3598  000BB2  6010               	cpfslt	isdigit@c,c
  3599  000BB4  D005               	goto	l651
  3600  000BB6  0E2F               	movlw	47
  3601  000BB8  6410               	cpfsgt	isdigit@c,c
  3602  000BBA  D002               	goto	l651
  3603  000BBC  0E01               	movlw	1
  3604  000BBE  6E0F               	movwf	_isdigit$1204,c
  3605  000BC0                     l651:
  3606  000BC0  0060  F03C  F00E   	movff	_isdigit$1204,??_isdigit
  3607  000BC6  300E               	rrcf	??_isdigit,w,c
  3608  000BC8  0012               	return	
  3609  000BCA                     __end_of_isdigit:
  3610                           	opt stack 0
  3611                           
  3612 ;; *************** function ___wmul *****************
  3613 ;; Defined at:
  3614 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  multiplier      2   13[COMRAM] unsigned int 
  3617 ;;  multiplicand    2   15[COMRAM] unsigned int 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  product         2   17[COMRAM] unsigned int 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  2   13[COMRAM] unsigned int 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0, prodl, prodh
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3629 ;;      Params:         4       0       0       0       0       0       0       0       0
  3630 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3632 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3633 ;;Total ram usage:        6 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    2
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_atoi
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text17
  3644  000B7C                     __ptext17:
  3645                           	opt stack 0
  3646  000B7C                     ___wmul:
  3647                           	opt stack 26
  3648                           
  3649                           ;incstack = 0
  3650  000B7C  500E               	movf	___wmul@multiplier,w,c
  3651  000B7E  0210               	mulwf	___wmul@multiplicand,c
  3652  000B80  006F FFCC  F012    	movff	16371,___wmul@product
  3653  000B86  006F FFD0  F013    	movff	16372,___wmul@product+1
  3654  000B8C  500E               	movf	___wmul@multiplier,w,c
  3655  000B8E  0211               	mulwf	___wmul@multiplicand+1,c
  3656  000B90  50F3               	movf	16371,w,c
  3657  000B92  2613               	addwf	___wmul@product+1,f,c
  3658  000B94  500F               	movf	___wmul@multiplier+1,w,c
  3659  000B96  0210               	mulwf	___wmul@multiplicand,c
  3660  000B98  50F3               	movf	16371,w,c
  3661  000B9A  2613               	addwf	___wmul@product+1,f,c
  3662  000B9C  0060  F048  F00E   	movff	___wmul@product,?___wmul
  3663  000BA2  0060  F04C  F00F   	movff	___wmul@product+1,?___wmul+1
  3664  000BA8  0012               	return	
  3665  000BAA                     __end_of___wmul:
  3666                           	opt stack 0
  3667                           
  3668 ;; *************** function _Default_ISR *****************
  3669 ;; Defined at:
  3670 ;;		line 37 in file "main.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;		None
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  2   54[None  ] int 
  3677 ;; Registers used:
  3678 ;;		None
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3684 ;;      Params:         0       0       0       0       0       0       0       0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3687 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3688 ;;Total ram usage:        0 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		Interrupt level 2
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text18
  3698  000C0C                     __ptext18:
  3699                           	opt stack 0
  3700  000C0C                     _Default_ISR:
  3701                           	opt stack 27
  3702                           
  3703                           ;incstack = 0
  3704  000C0C  0011               	retfie		f
  3705  000C0E                     __end_of_Default_ISR:
  3706                           	opt stack 0
  3707                           
  3708 ;; *************** function _isr_uart1_rx *****************
  3709 ;; Defined at:
  3710 ;;		line 76 in file "uart.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;		None
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  1    wreg      void 
  3717 ;; Registers used:
  3718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3724 ;;      Params:         0       0       0       0       0       0       0       0       0
  3725 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3726 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3727 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3728 ;;Total ram usage:        1 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    1
  3731 ;; This function calls:
  3732 ;;		_memcpy
  3733 ;; This function is called by:
  3734 ;;		Interrupt level 2
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text19
  3739  0007F0                     __ptext19:
  3740                           	opt stack 0
  3741  0007F0                     _isr_uart1_rx:
  3742                           	opt stack 26
  3743                           
  3744                           ;uart.c: 78: PIR3bits.U1IF = 0;
  3745                           
  3746                           ;incstack = 0
  3747  0007F0  0139               	movlb	57	; () banked
  3748  0007F2  9DA3               	bcf	163,6,b	;volatile
  3749                           
  3750                           ; BSR set to: 57
  3751                           ;uart.c: 79: uart_rx_buffer[buffer_index] = U1RXB;
  3752  0007F4  503C               	movf	_buffer_index,w,c
  3753  0007F6  0D01               	mullw	1
  3754  0007F8  0E80               	movlw	low _uart_rx_buffer
  3755  0007FA  24F3               	addwf	16371,w,c
  3756  0007FC  6ED9               	movwf	16345,c
  3757  0007FE  0E00               	movlw	high _uart_rx_buffer
  3758  000800  20F4               	addwfc	16372,w,c
  3759  000802  6EDA               	movwf	16346,c
  3760  000804  006F F7A3 FFDF     	movff	15848,16351	;volatile
  3761                           
  3762                           ;uart.c: 80: if (uart_rx_buffer[buffer_index] == 0x0d)
  3763  00080A  503C               	movf	_buffer_index,w,c
  3764  00080C  0D01               	mullw	1
  3765  00080E  0E80               	movlw	low _uart_rx_buffer
  3766  000810  24F3               	addwf	16371,w,c
  3767  000812  6ED9               	movwf	16345,c
  3768  000814  0E00               	movlw	high _uart_rx_buffer
  3769  000816  20F4               	addwfc	16372,w,c
  3770  000818  6EDA               	movwf	16346,c
  3771  00081A  0E0D               	movlw	13
  3772  00081C  18DE               	xorwf	16350,w,c
  3773  00081E  A4D8               	btfss	16344,2,c
  3774  000820  D01D               	goto	i2l154
  3775                           
  3776                           ; BSR set to: 57
  3777                           ;uart.c: 81: {
  3778                           ;uart.c: 82: memcpy(command, uart_rx_buffer, buffer_index);
  3779  000822  0E60               	movlw	low _command
  3780  000824  6E01               	movwf	memcpy@d1,c
  3781  000826  0E00               	movlw	high _command
  3782  000828  6E02               	movwf	memcpy@d1+1,c
  3783  00082A  0E80               	movlw	low _uart_rx_buffer
  3784  00082C  6E03               	movwf	memcpy@s1,c
  3785  00082E  0E00               	movlw	high _uart_rx_buffer
  3786  000830  6E04               	movwf	memcpy@s1+1,c
  3787  000832  0060  F0F0  F005   	movff	_buffer_index,memcpy@n
  3788  000838  6A06               	clrf	memcpy@n+1,c
  3789  00083A  ECF0  F004         	call	_memcpy	;wreg free
  3790                           
  3791                           ;uart.c: 83: command[buffer_index] = 0;
  3792  00083E  503C               	movf	_buffer_index,w,c
  3793  000840  0D01               	mullw	1
  3794  000842  0E60               	movlw	low _command
  3795  000844  24F3               	addwf	16371,w,c
  3796  000846  6ED9               	movwf	16345,c
  3797  000848  0E00               	movlw	high _command
  3798  00084A  20F4               	addwfc	16372,w,c
  3799  00084C  6EDA               	movwf	16346,c
  3800  00084E  0E00               	movlw	0
  3801  000850  6EDF               	movwf	16351,c
  3802                           
  3803                           ;uart.c: 84: uart_command_flag = 1;
  3804  000852  0E01               	movlw	1
  3805  000854  6E3B               	movwf	_uart_command_flag,c
  3806                           
  3807                           ;uart.c: 85: buffer_index = 0;
  3808  000856  0E00               	movlw	0
  3809  000858  6E3C               	movwf	_buffer_index,c
  3810                           
  3811                           ;uart.c: 86: }
  3812  00085A  0011               	retfie		f
  3813  00085C                     i2l154:
  3814                           
  3815                           ;uart.c: 87: else
  3816                           ;uart.c: 88: {
  3817                           ;uart.c: 89: buffer_index++;
  3818  00085C  2A3C               	incf	_buffer_index,f,c
  3819                           
  3820                           ;uart.c: 90: if (buffer_index >= 64)
  3821  00085E  0E3F               	movlw	63
  3822  000860  643C               	cpfsgt	_buffer_index,c
  3823  000862  0011               	retfie		f
  3824                           
  3825                           ;uart.c: 91: buffer_index = 0;
  3826  000864  0E00               	movlw	0
  3827  000866  6E3C               	movwf	_buffer_index,c
  3828  000868  0011               	retfie		f
  3829  00086A                     __end_of_isr_uart1_rx:
  3830                           	opt stack 0
  3831                           
  3832 ;; *************** function _memcpy *****************
  3833 ;; Defined at:
  3834 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  d1              2    0[COMRAM] PTR void 
  3837 ;;		 -> command(32), 
  3838 ;;  s1              2    2[COMRAM] PTR const void 
  3839 ;;		 -> uart_rx_buffer(32), 
  3840 ;;  n               2    4[COMRAM] unsigned int 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  s               2    8[COMRAM] PTR const unsigned char 
  3843 ;;		 -> uart_rx_buffer(32), 
  3844 ;;  d               2    6[COMRAM] PTR unsigned char 
  3845 ;;		 -> command(32), 
  3846 ;;  tmp             1   10[COMRAM] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  2    0[COMRAM] PTR void 
  3849 ;; Registers used:
  3850 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3856 ;;      Params:         6       0       0       0       0       0       0       0       0
  3857 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3859 ;;      Totals:        11       0       0       0       0       0       0       0       0
  3860 ;;Total ram usage:       11 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_isr_uart1_rx
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text20
  3870  0009E0                     __ptext20:
  3871                           	opt stack 0
  3872  0009E0                     _memcpy:
  3873                           	opt stack 26
  3874                           
  3875                           ;incstack = 0
  3876  0009E0  0060  F00C  F009   	movff	memcpy@s1,memcpy@s
  3877  0009E6  0060  F010  F00A   	movff	memcpy@s1+1,memcpy@s+1
  3878  0009EC  0060  F004  F007   	movff	memcpy@d1,memcpy@d
  3879  0009F2  0060  F008  F008   	movff	memcpy@d1+1,memcpy@d+1
  3880  0009F8  D015               	goto	i2l754
  3881  0009FA                     i2l1842:
  3882  0009FA  0060  F027  FFD9   	movff	memcpy@s,16345
  3883  000A00  0060  F02B  FFDA   	movff	memcpy@s+1,16346
  3884  000A06  50DF               	movf	16351,w,c
  3885  000A08  6E0B               	movwf	memcpy@tmp,c
  3886  000A0A  4A09               	infsnz	memcpy@s,f,c
  3887  000A0C  2A0A               	incf	memcpy@s+1,f,c
  3888  000A0E  0060  F01F  FFD9   	movff	memcpy@d,16345
  3889  000A14  0060  F023  FFDA   	movff	memcpy@d+1,16346
  3890  000A1A  0060  F02F  FFDF   	movff	memcpy@tmp,16351
  3891  000A20  4A07               	infsnz	memcpy@d,f,c
  3892  000A22  2A08               	incf	memcpy@d+1,f,c
  3893  000A24                     i2l754:
  3894  000A24  0605               	decf	memcpy@n,f,c
  3895  000A26  A0D8               	btfss	16344,0,c
  3896  000A28  0606               	decf	memcpy@n+1,f,c
  3897  000A2A  2805               	incf	memcpy@n,w,c
  3898  000A2C  E1E6               	bnz	i2l1842
  3899  000A2E  2806               	incf	memcpy@n+1,w,c
  3900  000A30  B4D8               	btfsc	16344,2,c
  3901  000A32  0012               	return	
  3902  000A34  D7E2               	goto	i2l755
  3903  000A36                     __end_of_memcpy:
  3904                           	opt stack 0
  3905                           
  3906 ;; *************** function _tmr1_isr *****************
  3907 ;; Defined at:
  3908 ;;		line 59 in file "traffic_lights.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3924 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3925 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3926 ;;Total ram usage:        1 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		Interrupt level 2
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text21
  3936  000B0C                     __ptext21:
  3937                           	opt stack 0
  3938  000B0C                     _tmr1_isr:
  3939                           	opt stack 27
  3940                           
  3941                           ;traffic_lights.c: 62: PIR4bits.TMR1IF = 0;
  3942                           
  3943                           ;incstack = 0
  3944  000B0C  0139               	movlb	57	; () banked
  3945  000B0E  91A4               	bcf	164,0,b	;volatile
  3946                           
  3947                           ;traffic_lights.c: 65: if (T1CONbits.NOT_SYNC == 1)
  3948  000B10  013F               	movlb	63	; () banked
  3949  000B12  A5B2               	btfss	178,2,b	;volatile
  3950  000B14  D008               	goto	i2l237
  3951                           
  3952                           ; BSR set to: 63
  3953                           ;traffic_lights.c: 66: {
  3954                           ;traffic_lights.c: 68: T1CONbits.TMR1ON = 0;
  3955  000B16  91B2               	bcf	178,0,b	;volatile
  3956                           
  3957                           ; BSR set to: 63
  3958                           ;traffic_lights.c: 70: TMR1H = (uint8_t)((timer1_counter_value >> 8) & 0xff);
  3959  000B18  503A               	movf	_timer1_counter_value+1,w,c
  3960  000B1A  6FB1               	movwf	177,b	;volatile
  3961                           
  3962                           ; BSR set to: 63
  3963                           ;traffic_lights.c: 71: TMR1L = (uint8_t)((timer1_counter_value) & 0xff);
  3964  000B1C  0060  F0E7  FFB0   	movff	_timer1_counter_value,16304	;volatile
  3965                           
  3966                           ; BSR set to: 63
  3967                           ;traffic_lights.c: 73: T1CONbits.TMR1ON = 1;
  3968  000B22  81B2               	bsf	178,0,b	;volatile
  3969                           
  3970                           ;traffic_lights.c: 74: }
  3971  000B24  D005               	goto	i2l238
  3972  000B26                     i2l237:
  3973                           
  3974                           ; BSR set to: 63
  3975                           ;traffic_lights.c: 75: else
  3976                           ;traffic_lights.c: 76: {
  3977                           ;traffic_lights.c: 78: TMR1H = (uint8_t)((timer1_counter_value >> 8) & 0xff);
  3978                           
  3979                           ; BSR set to: 63
  3980  000B26  503A               	movf	_timer1_counter_value+1,w,c
  3981  000B28  6FB1               	movwf	177,b	;volatile
  3982                           
  3983                           ; BSR set to: 63
  3984                           ;traffic_lights.c: 79: TMR1L = (uint8_t)((timer1_counter_value) & 0xff);
  3985  000B2A  0060  F0E7  FFB0   	movff	_timer1_counter_value,16304	;volatile
  3986  000B30                     i2l238:
  3987                           
  3988                           ; BSR set to: 63
  3989                           ;traffic_lights.c: 80: }
  3990                           ;traffic_lights.c: 82: LATDbits.LATD1 = ~LATDbits.LATD1;
  3991                           
  3992                           ; BSR set to: 63
  3993  000B30  A3BD               	btfss	189,1,b	;volatile
  3994  000B32  D002               	goto	i2u65_40
  3995  000B34  0E01               	movlw	1
  3996  000B36  D001               	goto	i2u65_46
  3997  000B38                     i2u65_40:
  3998  000B38  0E00               	movlw	0
  3999  000B3A                     i2u65_46:
  4000  000B3A  0AFF               	xorlw	255
  4001  000B3C  6E0D               	movwf	??_tmr1_isr& (0+255),c
  4002  000B3E  460D               	rlncf	??_tmr1_isr,f,c
  4003  000B40  51BD               	movf	189,w,b	;volatile
  4004  000B42  180D               	xorwf	??_tmr1_isr,w,c
  4005  000B44  0BFD               	andlw	-3
  4006  000B46  180D               	xorwf	??_tmr1_isr,w,c
  4007  000B48  6FBD               	movwf	189,b	;volatile
  4008                           
  4009                           ; BSR set to: 63
  4010                           ;traffic_lights.c: 83: s_counter++;
  4011  000B4A  2A3F               	incf	_s_counter,f,c
  4012                           
  4013                           ; BSR set to: 63
  4014  000B4C  0011               	retfie		f
  4015  000B4E                     __end_of_tmr1_isr:
  4016                           	opt stack 0
  4017                           
  4018                           ;
  4019                           ; Interrupt Vector Table @ 0x8
  4020                           ;
  4021                           
  4022                           	psect	ivt0x8
  4023  000008                     __pivt0x8:
  4024                           	opt stack 0
  4025  000008                     ivt0x8_base:
  4026                           	opt stack 0
  4027                           
  4028                           ; Vector 0 : SWINT
  4029  000008  0303               	dw	_Default_ISR shr (0+2)
  4030                           
  4031                           ; Vector 1 : HLVD
  4032  00000A  0303               	dw	_Default_ISR shr (0+2)
  4033                           
  4034                           ; Vector 2 : OSF
  4035  00000C  0303               	dw	_Default_ISR shr (0+2)
  4036                           
  4037                           ; Vector 3 : CSW
  4038  00000E  0303               	dw	_Default_ISR shr (0+2)
  4039                           
  4040                           ; Vector 4 : NVM
  4041  000010  0303               	dw	_Default_ISR shr (0+2)
  4042                           
  4043                           ; Vector 5 : SCAN
  4044  000012  0303               	dw	_Default_ISR shr (0+2)
  4045                           
  4046                           ; Vector 6 : CRC
  4047  000014  0303               	dw	_Default_ISR shr (0+2)
  4048                           
  4049                           ; Vector 7 : IOC
  4050  000016  0303               	dw	_Default_ISR shr (0+2)
  4051                           
  4052                           ; Vector 8 : INT0
  4053  000018  0303               	dw	_Default_ISR shr (0+2)
  4054                           
  4055                           ; Vector 9 : ZCD
  4056  00001A  0303               	dw	_Default_ISR shr (0+2)
  4057                           
  4058                           ; Vector 10 : AD
  4059  00001C  0303               	dw	_Default_ISR shr (0+2)
  4060                           
  4061                           ; Vector 11 : ADT
  4062  00001E  0303               	dw	_Default_ISR shr (0+2)
  4063                           
  4064                           ; Vector 12 : CMP1
  4065  000020  0303               	dw	_Default_ISR shr (0+2)
  4066                           
  4067                           ; Vector 13 : SMT1
  4068  000022  0303               	dw	_Default_ISR shr (0+2)
  4069                           
  4070                           ; Vector 14 : SMT1PRA
  4071  000024  0303               	dw	_Default_ISR shr (0+2)
  4072                           
  4073                           ; Vector 15 : SMT1PRW
  4074  000026  0303               	dw	_Default_ISR shr (0+2)
  4075                           
  4076                           ; Vector 16 : DMA1SCNT
  4077  000028  0303               	dw	_Default_ISR shr (0+2)
  4078                           
  4079                           ; Vector 17 : DMA1DCNT
  4080  00002A  0303               	dw	_Default_ISR shr (0+2)
  4081                           
  4082                           ; Vector 18 : DMA1OR
  4083  00002C  0303               	dw	_Default_ISR shr (0+2)
  4084                           
  4085                           ; Vector 19 : DMA1A
  4086  00002E  0303               	dw	_Default_ISR shr (0+2)
  4087                           
  4088                           ; Vector 20 : SPI1RX
  4089  000030  0303               	dw	_Default_ISR shr (0+2)
  4090                           
  4091                           ; Vector 21 : SPI1TX
  4092  000032  0303               	dw	_Default_ISR shr (0+2)
  4093                           
  4094                           ; Vector 22 : SPI1
  4095  000034  0303               	dw	_Default_ISR shr (0+2)
  4096                           
  4097                           ; Vector 23 : I2C1RX
  4098  000036  0303               	dw	_Default_ISR shr (0+2)
  4099                           
  4100                           ; Vector 24 : I2C1TX
  4101  000038  0303               	dw	_Default_ISR shr (0+2)
  4102                           
  4103                           ; Vector 25 : I2C1
  4104  00003A  0303               	dw	_Default_ISR shr (0+2)
  4105                           
  4106                           ; Vector 26 : I2C1E
  4107  00003C  0303               	dw	_Default_ISR shr (0+2)
  4108                           
  4109                           ; Vector 27 : U1RX
  4110  00003E  01FC               	dw	_isr_uart1_rx shr (0+2)
  4111                           
  4112                           ; Vector 28 : U1TX
  4113  000040  0303               	dw	_Default_ISR shr (0+2)
  4114                           
  4115                           ; Vector 29 : U1E
  4116  000042  0303               	dw	_Default_ISR shr (0+2)
  4117                           
  4118                           ; Vector 30 : U1
  4119  000044  0303               	dw	_Default_ISR shr (0+2)
  4120                           
  4121                           ; Vector 31 : TMR0
  4122  000046  0303               	dw	_Default_ISR shr (0+2)
  4123                           
  4124                           ; Vector 32 : TMR1
  4125  000048  02C3               	dw	_tmr1_isr shr (0+2)
  4126                           
  4127                           ; Vector 33 : TMR1G
  4128  00004A  0303               	dw	_Default_ISR shr (0+2)
  4129                           
  4130                           ; Vector 34 : TMR2
  4131  00004C  0303               	dw	_Default_ISR shr (0+2)
  4132                           
  4133                           ; Vector 35 : CCP1
  4134  00004E  0303               	dw	_Default_ISR shr (0+2)
  4135                           
  4136                           ; Vector 36 : Undefined
  4137  000050  002B               	dw	ivt0x8_undefint shr (0+2)
  4138                           
  4139                           ; Vector 37 : NCO1
  4140  000052  0303               	dw	_Default_ISR shr (0+2)
  4141                           
  4142                           ; Vector 38 : CWG1
  4143  000054  0303               	dw	_Default_ISR shr (0+2)
  4144                           
  4145                           ; Vector 39 : CLC1
  4146  000056  0303               	dw	_Default_ISR shr (0+2)
  4147                           
  4148                           ; Vector 40 : INT1
  4149  000058  0303               	dw	_Default_ISR shr (0+2)
  4150                           
  4151                           ; Vector 41 : CMP2
  4152  00005A  0303               	dw	_Default_ISR shr (0+2)
  4153                           
  4154                           ; Vector 42 : DMA2SCNT
  4155  00005C  0303               	dw	_Default_ISR shr (0+2)
  4156                           
  4157                           ; Vector 43 : DMA2DCNT
  4158  00005E  0303               	dw	_Default_ISR shr (0+2)
  4159                           
  4160                           ; Vector 44 : DMA2OR
  4161  000060  0303               	dw	_Default_ISR shr (0+2)
  4162                           
  4163                           ; Vector 45 : DMA2A
  4164  000062  0303               	dw	_Default_ISR shr (0+2)
  4165                           
  4166                           ; Vector 46 : I2C2RX
  4167  000064  0303               	dw	_Default_ISR shr (0+2)
  4168                           
  4169                           ; Vector 47 : I2C2TX
  4170  000066  0303               	dw	_Default_ISR shr (0+2)
  4171                           
  4172                           ; Vector 48 : I2C2
  4173  000068  0303               	dw	_Default_ISR shr (0+2)
  4174                           
  4175                           ; Vector 49 : I2C2E
  4176  00006A  0303               	dw	_Default_ISR shr (0+2)
  4177                           
  4178                           ; Vector 50 : U2RX
  4179  00006C  0303               	dw	_Default_ISR shr (0+2)
  4180                           
  4181                           ; Vector 51 : U2TX
  4182  00006E  0303               	dw	_Default_ISR shr (0+2)
  4183                           
  4184                           ; Vector 52 : U2E
  4185  000070  0303               	dw	_Default_ISR shr (0+2)
  4186                           
  4187                           ; Vector 53 : U2
  4188  000072  0303               	dw	_Default_ISR shr (0+2)
  4189                           
  4190                           ; Vector 54 : TMR3
  4191  000074  0303               	dw	_Default_ISR shr (0+2)
  4192                           
  4193                           ; Vector 55 : TMR3G
  4194  000076  0303               	dw	_Default_ISR shr (0+2)
  4195                           
  4196                           ; Vector 56 : TMR4
  4197  000078  0303               	dw	_Default_ISR shr (0+2)
  4198                           
  4199                           ; Vector 57 : CCP2
  4200  00007A  0303               	dw	_Default_ISR shr (0+2)
  4201                           
  4202                           ; Vector 58 : Undefined
  4203  00007C  002B               	dw	ivt0x8_undefint shr (0+2)
  4204                           
  4205                           ; Vector 59 : CWG2
  4206  00007E  0303               	dw	_Default_ISR shr (0+2)
  4207                           
  4208                           ; Vector 60 : CLC2
  4209  000080  0303               	dw	_Default_ISR shr (0+2)
  4210                           
  4211                           ; Vector 61 : INT2
  4212  000082  0303               	dw	_Default_ISR shr (0+2)
  4213                           
  4214                           ; Vector 62 : Undefined
  4215  000084  002B               	dw	ivt0x8_undefint shr (0+2)
  4216                           
  4217                           ; Vector 63 : Undefined
  4218  000086  002B               	dw	ivt0x8_undefint shr (0+2)
  4219                           
  4220                           ; Vector 64 : Undefined
  4221  000088  002B               	dw	ivt0x8_undefint shr (0+2)
  4222                           
  4223                           ; Vector 65 : Undefined
  4224  00008A  002B               	dw	ivt0x8_undefint shr (0+2)
  4225                           
  4226                           ; Vector 66 : Undefined
  4227  00008C  002B               	dw	ivt0x8_undefint shr (0+2)
  4228                           
  4229                           ; Vector 67 : Undefined
  4230  00008E  002B               	dw	ivt0x8_undefint shr (0+2)
  4231                           
  4232                           ; Vector 68 : Undefined
  4233  000090  002B               	dw	ivt0x8_undefint shr (0+2)
  4234                           
  4235                           ; Vector 69 : Undefined
  4236  000092  002B               	dw	ivt0x8_undefint shr (0+2)
  4237                           
  4238                           ; Vector 70 : TMR5
  4239  000094  0303               	dw	_Default_ISR shr (0+2)
  4240                           
  4241                           ; Vector 71 : TMR5G
  4242  000096  0303               	dw	_Default_ISR shr (0+2)
  4243                           
  4244                           ; Vector 72 : TMR6
  4245  000098  0303               	dw	_Default_ISR shr (0+2)
  4246                           
  4247                           ; Vector 73 : CCP3
  4248  00009A  0303               	dw	_Default_ISR shr (0+2)
  4249                           
  4250                           ; Vector 74 : CWG3
  4251  00009C  0303               	dw	_Default_ISR shr (0+2)
  4252                           
  4253                           ; Vector 75 : CLC3
  4254  00009E  0303               	dw	_Default_ISR shr (0+2)
  4255                           
  4256                           ; Vector 76 : Undefined
  4257  0000A0  002B               	dw	ivt0x8_undefint shr (0+2)
  4258                           
  4259                           ; Vector 77 : Undefined
  4260  0000A2  002B               	dw	ivt0x8_undefint shr (0+2)
  4261                           
  4262                           ; Vector 78 : Undefined
  4263  0000A4  002B               	dw	ivt0x8_undefint shr (0+2)
  4264                           
  4265                           ; Vector 79 : Undefined
  4266  0000A6  002B               	dw	ivt0x8_undefint shr (0+2)
  4267                           
  4268                           ; Vector 80 : CCP4
  4269  0000A8  0303               	dw	_Default_ISR shr (0+2)
  4270                           
  4271                           ; Vector 81 : CLC4
  4272  0000AA  0303               	dw	_Default_ISR shr (0+2)
  4273  0000AC                     ivt0x8_undefint:
  4274                           	opt stack 0
  4275  0000AC  00C0               	trap
  4276                           
  4277                           	psect	rparam


Data Sizes:
    Strings     666
    Constant    10
    Data        0
    BSS         72
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     56      65
    BANK0           160      0      64
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 398
		 -> STR_26(CODE[398]), command_exec@s_buffer(COMRAM[8]), STR_19(CODE[6]), STR_18(CODE[21]), 
		 -> STR_16(CODE[6]), STR_15(CODE[21]), STR_13(CODE[6]), STR_12(CODE[21]), 
		 -> STR_10(CODE[6]), STR_8(CODE[41]), command(BANK0[32]), STR_7(CODE[30]), 
		 -> STR_6(CODE[32]), STR_5(CODE[21]), STR_4(CODE[25]), STR_3(CODE[47]), 
		 -> STR_2(CODE[20]), STR_1(CODE[5]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 398
		 -> STR_26(CODE[398]), command_exec@s_buffer(COMRAM[8]), STR_19(CODE[6]), STR_18(CODE[21]), 
		 -> STR_16(CODE[6]), STR_15(CODE[21]), STR_13(CODE[6]), STR_12(CODE[21]), 
		 -> STR_10(CODE[6]), STR_8(CODE[41]), command(BANK0[32]), STR_7(CODE[30]), 
		 -> STR_6(CODE[32]), STR_5(CODE[21]), STR_4(CODE[25]), STR_3(CODE[47]), 
		 -> STR_2(CODE[20]), STR_1(CODE[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 32
		 -> command_exec@c_cmd(COMRAM[3]), command(BANK0[32]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), STR_22(CODE[5]), STR_20(CODE[5]), STR_17(CODE[3]), 
		 -> STR_14(CODE[3]), STR_11(CODE[3]), STR_9(CODE[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 32
		 -> command(BANK0[32]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 32
		 -> command(BANK0[32]), 

    memcpy@s1	PTR const void  size(2) Largest target is 32
		 -> uart_rx_buffer(BANK0[32]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 32
		 -> uart_rx_buffer(BANK0[32]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> command_exec@c_param(COMRAM[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_25(CODE[5]), STR_23(CODE[5]), STR_21(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> command_exec@s_buffer(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memcpy	PTR void  size(2) Largest target is 32
		 -> command(BANK0[32]), 

    uart1_write_string@s	PTR unsigned char  size(2) Largest target is 398
		 -> STR_26(CODE[398]), command_exec@s_buffer(COMRAM[8]), STR_19(CODE[6]), STR_18(CODE[21]), 
		 -> STR_16(CODE[6]), STR_15(CODE[21]), STR_13(CODE[6]), STR_12(CODE[21]), 
		 -> STR_10(CODE[6]), STR_8(CODE[41]), STR_7(CODE[30]), STR_6(CODE[32]), 
		 -> STR_5(CODE[21]), STR_4(CODE[25]), STR_3(CODE[47]), STR_2(CODE[20]), 
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_command_exec
    _traffic_lights_init->_read_eeprom
    _command_exec->_sprintf
    _uart1_write_string->_strlen
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _atoi->___wmul

Critical Paths under _Default_ISR in COMRAM

    None.

Critical Paths under _isr_uart1_rx in COMRAM

    _isr_uart1_rx->_memcpy

Critical Paths under _tmr1_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Default_ISR in BANK0

    None.

Critical Paths under _isr_uart1_rx in BANK0

    None.

Critical Paths under _tmr1_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Default_ISR in BANK1

    None.

Critical Paths under _isr_uart1_rx in BANK1

    None.

Critical Paths under _tmr1_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Default_ISR in BANK2

    None.

Critical Paths under _isr_uart1_rx in BANK2

    None.

Critical Paths under _tmr1_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Default_ISR in BANK3

    None.

Critical Paths under _isr_uart1_rx in BANK3

    None.

Critical Paths under _tmr1_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Default_ISR in BANK4

    None.

Critical Paths under _isr_uart1_rx in BANK4

    None.

Critical Paths under _tmr1_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Default_ISR in BANK5

    None.

Critical Paths under _isr_uart1_rx in BANK5

    None.

Critical Paths under _tmr1_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Default_ISR in BANK6

    None.

Critical Paths under _isr_uart1_rx in BANK6

    None.

Critical Paths under _tmr1_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Default_ISR in BANK7

    None.

Critical Paths under _isr_uart1_rx in BANK7

    None.

Critical Paths under _tmr1_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    8329
                                             55 COMRAM     1     1      0
                       _command_exec
                _traffic_light_logic
                _traffic_lights_init
                         _uart1_init
                 _uart1_write_string
 ---------------------------------------------------------------------------------
 (1) _uart1_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _traffic_lights_init                                  0     0      0      22
                        _read_eeprom
 ---------------------------------------------------------------------------------
 (1) _traffic_light_logic                                  0     0      0       0
                       _reset_timer1
 ---------------------------------------------------------------------------------
 (2) _reset_timer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _command_exec                                        16    16      0    6486
                                             39 COMRAM    16    16      0
                               _atoi
                        _read_eeprom
                            _sprintf
                             _strcmp
                             _strlen
                 _uart1_write_string
                       _write_eeprom
 ---------------------------------------------------------------------------------
 (2) _write_eeprom                                         3     2      1     295
                                             13 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _uart1_write_string                                   6     4      2    1798
                                             19 COMRAM     6     4      2
                             _strlen
                        _uart1_write
 ---------------------------------------------------------------------------------
 (2) _uart1_write                                          1     1      0      22
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     242
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1155
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1558
                                             25 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
                        _read_eeprom (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             20 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _read_eeprom                                          1     1      0      22
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             19 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             13 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Default_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr_uart1_rx                                         1     1      0     371
                                             11 COMRAM     1     1      0
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tmr1_isr                                             1     1      0       0
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _command_exec
     _atoi
       ___wmul
       _isdigit
     _read_eeprom
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _read_eeprom (ARG)
     _strcmp
     _strlen
     _uart1_write_string
       _strlen
       _uart1_write
     _write_eeprom
   _traffic_light_logic
     _reset_timer1
   _traffic_lights_init
     _read_eeprom
   _uart1_init
   _uart1_write_string
     _strlen
     _uart1_write

 _Default_ISR (ROOT)

 _isr_uart1_rx (ROOT)
   _memcpy

 _tmr1_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      20        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      17        0.0%
BANK7              100      0       0      18        0.0%
BITBANK6           100      0       0      15        0.0%
BANK6              100      0       0      16        0.0%
BITBANK5           100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      40       4       40.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     38      41       1       68.4%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      81      19        0.0%
DATA                 0      0      81      21        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Sep 18 10:34:55 2023

               ?_command_exec 0001                            l60 067E                            l61 068E  
         ___wmul@multiplicand 0010                           l301 0444                           l302 04B0  
                         l303 044C                           l223 0784                           l160 00DE  
                         l146 08B0                           l170 0272                           l162 0146  
                         l250 06CE                           l226 079C                           l147 0874  
                         l171 0252                           l164 01AA                           l252 06EC  
                         l173 02BE                           l165 018A                           l245 072A  
                         l229 07B4                           l254 070A                           l246 06A0  
                         l175 030A                           l167 020E                           l168 01EE  
                         l256 071C                           l248 06B0                           l273 0AAE  
                         l177 0356                           l178 0362                           l470 04EE  
                         l471 04EA                           l295 03C2                           l288 0372  
                         l473 053A                           l297 03F2                           l289 0392  
                         l730 09A8                           l651 0BC0                           l731 09A0  
                         l476 0592                           l740 0ADA                           l477 0550  
                         l741 0AD2                           l734 09C8                           l479 05D0  
                         l735 09D2                           l744 0AF2                           l745 0AFC  
                         l880 093A                           l881 0932                           l888 08E0  
                         l889 08DC                           _GIE 01FE97                           u720 09AC  
                         u800 097E                           u750 0ADE                           u670 0908  
                         u930 0422                           u770 08A8                           u677 08FA  
                         u950 04B8                           u960 04D6                           u777 089A  
                         u980 0780                           u885 0ABE                           u886 0AC2  
                         prod 003FF3                           wreg 003FE8                  __CFG_LVP$OFF 000000  
                        l1600 058E                          l1490 0BFC                          l1666 03F6  
                        STR_1 7F66                          STR_2 7FCC                          STR_3 7EF3  
                        STR_4 7F89                          STR_5 7FB7                          STR_6 7F4B  
                        STR_7 7F6B                          STR_8 7F22                          STR_9 7FEB  
                        u1000 0798                          u1020 07B0                          u1050 0124  
                        u1056 0126                          u1160 0618                          u1175 061C  
                        _LATD 003FBD                          _atoi 04E8                          _main 05DE  
                        fsr0h 003FEA                          indf0 003FEF                          fsr2h 003FDA  
                        fsr0l 003FE9                          indf2 003FDF                          fsr2l 003FD9  
                        prodh 003FF4                          prodl 003FF3                          start 00AE  
                ___param_bank 000000                ??_command_exec 0028                         ?_atoi 0014  
                       ?_main 0001                         STR_10 7FE0                         STR_11 7FFC  
                       STR_20 7FF5                         STR_12 7FA2                         STR_13 7FE0  
                       STR_21 7FE6                         STR_14 7FF7                         STR_22 7FFA  
                       STR_23 7FE6                         STR_15 7FA2                         STR_16 7FE0  
                       STR_24 7FF0                         STR_25 7FE6                         STR_17 7FF2  
               __CFG_WDTE$OFF 000000                         STR_18 7FA2                         STR_26 7D65  
                       STR_19 7FE0                         _T1CLK 003FB5               __end_of___lwdiv 09E0  
                       _U1RXB 003DE8               __end_of___lwmod 0B0A                         _U1TXB 003DEA  
                       i2l154 085C                         i2l237 0B26                         i2l238 0B30  
                       i2l754 0A24                         i2l755 09FA                         _TMR1H 003FB1  
                       _TMR1L 003FB0                         _TRISD 003FC5                   _Default_ISR 0C0C  
                ?_read_eeprom 0001                 __CFG_WRTD$OFF 000000               __end_of_dpowers 7D65  
             __end_of_isdigit 0BCA                         atoi@a 0019                         atoi@s 0014  
                       tablat 003FF5                         status 003FD8               __end_of_sprintf 04E8  
             __initialization 0B4E                  __end_of_atoi 05DE                  __end_of_main 069E  
          uart1_write@tx_data 000E         __size_of_write_eeprom 0046                        ??_atoi 0016  
                      ??_main 0038                 __activetblptr 000002   __end_of_traffic_light_logic 0752  
 __end_of_traffic_lights_init 07F0                  ?_uart1_write 0001                        _ANSELD 003A70  
                      _T1GATE 003FB4                        _T1GCON 003FB3                        _U1BRGH 003DF6  
                      _U1BRGL 003DF5                        _RB4PPS 003A0C                        i2l1842 09FA  
          __CFG_RSTOSC$EXTOSC 000000                        _NVMDAT 0039E3                  _write_eeprom 0A7E  
           _uart_command_flag 003B                        ___wmul 0B7C                     ??___lwdiv 0012  
                   ??___lwmod 0019                        _memcpy 09E0                        clear_0 0B54  
                      clear_1 0B60                        _strcmp 0930                        _strlen 08CE  
            __end_of_tmr1_isr 0B4E                     ??_isdigit 000E                  __mediumconst 7D5A  
                      tblptrh 003FF7                        tblptrl 003FF6                        tblptru 003FF8  
        __end_of_command_exec 0368                     ??_sprintf 0020                    __accesstop 0060  
     __end_of__initialization 0B72               __CFG_FEXTOSC$HS 000000      _s_button_pressed_counter 003D  
               ___rparam_used 000001                __pcstackCOMRAM 0001                ivt0x8_undefint 00AC  
          _uart1_write_string 086A                 ?_isr_uart1_rx 0001           ?_uart1_write_string 0014  
        __size_of_read_eeprom 001A                    __pbssBANK0 0060                    __pnvCOMRAM 0041  
                     IVTBASEH 003FD6                       IVTBASEL 003FD5                       IVTBASEU 003FD7  
        ??_uart1_write_string 0016                       ?___wmul 000E                       ?_memcpy 0001  
                     ?_strcmp 000E                       ?_strlen 000E                ??_isr_uart1_rx 000C  
                ?_Default_ISR 0001                       _IVTLOCK 003FD4                       _NVMADRL 0039E0  
                     _NVMCON2 0039E6                       i2u65_40 0B38                       i2u65_46 0B3A  
            write_eeprom@addr 000F              write_eeprom@data 000E          __size_of_uart1_write 0010  
        command_exec@s_buffer 0029                     ?_tmr1_isr 0001                       __Hparam 0000  
               ?_reset_timer1 0001                       __Lparam 0000               __size_of___wmul 002E  
                     ___lwdiv 098A                       ___lwmod 0AC4                       __pcinit 0B4E  
         uart1_write_string@i 0018               __size_of_memcpy 0056           uart1_write_string@s 0014  
                     __ramtop 0800                       __ptext0 05DE                       __ptext1 0A36  
                     __ptext2 0752                       __ptext3 069E                       __ptext4 0BE4  
                     __ptext5 00B2                       __ptext6 0A7E                       __ptext7 086A  
                     __ptext8 0BFA                       __ptext9 08CE                       _command 0060  
             __size_of_strcmp 005A               __size_of_strlen 0062                     _T1CONbits 003FB2  
       __size_of_command_exec 02B6                       _dpowers 7D5B                       _isdigit 0BAA  
                     _sprintf 0368          end_of_initialization 0B72                       memcpy@d 0007  
                     memcpy@n 0005                       memcpy@s 0009                    _uart1_init 0A36  
               __Lmediumconst 7D5A                ??_reset_timer1 000E                    ??_tmr1_isr 000D  
                _buffer_index 003C                       postdec2 003FDD                       postinc0 003FEE  
                     postinc2 003FDE                  _command_exec 00B2                       strcmp@r 0013  
                     strlen@s 000E                     _PORTBbits 003FCB          _s_transition_counter 0041  
                   _TRISBbits 003FC3                 _s_red_counter 003E  __size_of_traffic_light_logic 00B4  
__size_of_traffic_lights_init 009E          __end_of_isr_uart1_rx 086A                __end_of___wmul 0BAA  
              __end_of_memcpy 0A36                __end_of_strcmp 098A                __end_of_strlen 0930  
         start_initialization 0B4E          __size_of_Default_ISR 0002                    ivt0x8_base 0008  
                 ?_uart1_init 0001                      ??___wmul 0012                      ??_memcpy 0007  
                    ??_strcmp 0012                      ??_strlen 0010                   __pbssCOMRAM 0039  
        __end_of_reset_timer1 0BFA                 ??_read_eeprom 000E                  _isdigit$1204 000F  
                 sprintf@flag 0023                   sprintf@prec 0024              ___lwdiv@dividend 000E  
 __size_of_uart1_write_string 0064             command_exec@c_cmd 0031                 __pmediumconst 7D5A  
           __size_of_tmr1_isr 0042             command_exec@value 0037                      ?___lwdiv 000E  
                    ?___lwmod 0015           command_exec@c_param 0034           __size_of_uart1_init 0048  
                    ?_isdigit 0001              ___lwdiv@quotient 0012                 ??_uart1_write 000E  
                    ?_sprintf 001A                   _U1ERRIRbits 003DF9         __size_of_isr_uart1_rx 007A  
                   _s_counter 003F           __end_of_read_eeprom 0BE4                _uart_rx_buffer 0080  
              ___wmul@product 0012                      _LATDbits 003FBD                      _IPR3bits 003983  
                    _IPR4bits 003984                      _PIE3bits 003993                 ?_write_eeprom 000E  
                    _PIE4bits 003994               read_eeprom@addr 000E                      _IVTBASEH 003FD6  
                    _IVTBASEL 003FD5                      _IVTBASEU 003FD7                      _PIR3bits 0039A3  
                    _PIR4bits 0039A4           _traffic_light_logic 069E             ___wmul@multiplier 000E  
         _traffic_lights_init 0752                  _isr_uart1_rx 07F0                     main@state 0038  
                 _INTCON0bits 003FD2                   _U1RXPPSbits 003AE5          ?_traffic_light_logic 0001  
              ??_write_eeprom 000F          ?_traffic_lights_init 0001           __end_of_uart1_write 0C0A  
                    __Hrparam 0000                     memcpy@tmp 000B                      __Lrparam 0000  
            __size_of___lwdiv 0056              __size_of___lwmod 0046         __size_of_reset_timer1 0016  
                  _ANSELBbits 003A50                    sprintf@val 0025              __size_of_isdigit 0020  
                 _read_eeprom 0BCA                      __pivt0x8 0008               ___lwdiv@divisor 0010  
             ___lwdiv@counter 0014                      __ptext10 0930                      __ptext11 0368  
                    __ptext20 09E0                      __ptext12 0AC4                      __ptext21 0B0C  
                    __ptext13 098A                      __ptext14 0BCA                      __ptext15 04E8  
                    __ptext16 0BAA                      __ptext17 0B7C                      __ptext18 0C0C  
                    __ptext19 07F0                    _U1CON0bits 003DF2                    _U1CON1bits 003DF3  
            __size_of_sprintf 0180         ??_traffic_light_logic 000E                  ??_uart1_init 000E  
        write_eeprom@GIEValue 0010                 __size_of_atoi 00F6                 __size_of_main 00C0  
       ??_traffic_lights_init 000F                   _IVTLOCKbits 003FD4                      _tmr1_isr 0B0C  
                _reset_timer1 0BE4                      _tf_state 0040                      atoi@sign 0018  
        _timer1_counter_value 0039                 ??_Default_ISR 0001            __end_of_uart1_init 0A7E  
                 _NVMCON1bits 0039E5                      memcpy@d1 0001                      memcpy@s1 0003  
                    isdigit@c 0010                   _uart1_write 0BFA                      intlevel2 0000  
                   sprintf@ap 0021                     sprintf@sp 001A              ___lwmod@dividend 0015  
                    sprintf@c 0027                      sprintf@f 001C          __end_of_write_eeprom 0AC4  
                    strcmp@s1 000E                      strcmp@s2 0010               ___lwmod@divisor 0017  
                    strlen@cp 0012               ___lwmod@counter 0019           __end_of_Default_ISR 0C0E  
  __end_of_uart1_write_string 08CE  
